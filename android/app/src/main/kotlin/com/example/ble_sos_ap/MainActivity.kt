package com.miempresa.ble_sos_ap

import android.content.Intent
import android.net.Uri
import android.os.Bundle
import android.Manifest
import android.content.Context
import android.app.ActivityManager
import android.content.pm.PackageManager
import android.util.Log
import androidx.core.app.ActivityCompat
import io.flutter.embedding.android.FlutterActivity
import io.flutter.embedding.engine.FlutterEngine
import io.flutter.plugin.common.MethodChannel
import android.app.KeyguardManager
import android.app.PendingIntent
import android.app.NotificationChannel
import android.app.NotificationManager
import androidx.core.app.NotificationCompat
import android.graphics.Color
import android.os.PowerManager
import android.content.ComponentName
import android.content.ServiceConnection
import android.os.IBinder
import android.provider.Settings

class MainActivity : FlutterActivity() {
    private val CALL_CHANNEL = "com.miempresa.ble_sos_ap/call"
    private val FOREGROUND_CHANNEL = "com.miempresa.ble_sos_ap/foreground"
    private val NOTIFICATION_CHANNEL = "com.miempresa.ble_sos_ap/notification"
    // ‚úÖ NUEVO CANAL para comunicaci√≥n de lifecycle
    private val LIFECYCLE_CHANNEL = "com.miempresa.ble_sos_ap/lifecycle"
    
    // IDs para las diferentes notificaciones
    private val SOS_NOTIFICATION_ID = 1
    private val BLE_DISCONNECTED_NOTIFICATION_ID = 101
    private val BLE_CONNECTED_NOTIFICATION_ID = 102
    private val LOCATION_CONFIRMED_NOTIFICATION_ID = 103
    private val LOCATION_FAILED_NOTIFICATION_ID = 104

    // ‚úÖ NUEVA VARIABLE para controlar cierre permanente
    private var appIsClosingPermanently = false

    override fun configureFlutterEngine(flutterEngine: FlutterEngine) {
        super.configureFlutterEngine(flutterEngine)

        // Canal para llamadas telef√≥nicas (existente)
        MethodChannel(flutterEngine.dartExecutor.binaryMessenger, CALL_CHANNEL).setMethodCallHandler { call, result ->
            if (call.method == "callNumber") {
                val phoneNumber = call.argument<String>("phone")
                if (phoneNumber != null) {
                    makeCall(phoneNumber)
                    result.success("Llamada iniciada")
                } else {
                    result.error("INVALID_NUMBER", "N√∫mero no v√°lido", null)
                }
            } else {
                result.notImplemented()
            }
        }

        // Canal para traer la app al frente (existente)
        MethodChannel(flutterEngine.dartExecutor.binaryMessenger, FOREGROUND_CHANNEL).setMethodCallHandler { call, result ->
            if (call.method == "bringToForeground") {
                bringToForeground()
                result.success("App tra√≠da al frente")
            } else {
                result.notImplemented()
            }
        }
        
        // Canal para notificaciones (existente)
        MethodChannel(flutterEngine.dartExecutor.binaryMessenger, NOTIFICATION_CHANNEL).setMethodCallHandler { call, result ->
            when (call.method) {
                "showBleDisconnectedNotification" -> {
                    showBleDisconnectedNotification()
                    result.success(true)
                }
                "showBleConnectedNotification" -> {
                    showBleConnectedNotification()
                    result.success(true)
                }
                "showLocationConfirmedNotification" -> {
                    showLocationConfirmedNotification()
                    result.success(true)
                }
                "showLocationFailedNotification" -> {
                    showLocationFailedNotification()
                    result.success(true)
                }
                else -> {
                    result.notImplemented()
                }
            }
        }

        MethodChannel(flutterEngine.dartExecutor.binaryMessenger, LIFECYCLE_CHANNEL).setMethodCallHandler { call, result ->
            when (call.method) {
                "forceStopAllServices" -> {
                    forceStopAllServicesNuclear()
                    result.success(true)
                }
                else -> {
                    result.notImplemented()
                }
            }
        }
    }

    // Funciones existentes sin cambios
    private fun makeCall(phoneNumber: String) {
        val intent = Intent(Intent.ACTION_CALL)
        intent.data = Uri.parse("tel:$phoneNumber")

        if (ActivityCompat.checkSelfPermission(this, Manifest.permission.CALL_PHONE) == PackageManager.PERMISSION_GRANTED) {
            startActivity(intent)
        } else {
            ActivityCompat.requestPermissions(this, arrayOf(Manifest.permission.CALL_PHONE), 1)
        }
    }

    private fun bringToForeground() {
        val notificationIntent = Intent(this, MainActivity::class.java).apply {
            flags = Intent.FLAG_ACTIVITY_NEW_TASK or 
                    Intent.FLAG_ACTIVITY_CLEAR_TOP or 
                    Intent.FLAG_ACTIVITY_SINGLE_TOP
        }
        
        val pendingIntent = PendingIntent.getActivity(
            this, 0, notificationIntent,
            PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE
        )

        val fullScreenIntent = Intent(this, MainActivity::class.java).apply {
            flags = Intent.FLAG_ACTIVITY_NEW_TASK or 
                    Intent.FLAG_ACTIVITY_CLEAR_TOP or 
                    Intent.FLAG_ACTIVITY_SINGLE_TOP
        }
        
        val fullScreenPendingIntent = PendingIntent.getActivity(
            this, 0, fullScreenIntent,
            PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE
        )

        try {
            val powerManager = getSystemService(Context.POWER_SERVICE) as PowerManager
            val wakeLock = powerManager.newWakeLock(
                PowerManager.FULL_WAKE_LOCK or PowerManager.ACQUIRE_CAUSES_WAKEUP,
                "BleSOSApp::WakeLockTag"
            )
            wakeLock.acquire(10000)
        } catch (e: Exception) {
            Log.e("MainActivity", "Error al adquirir wakelock: ${e.message}")
        }

        val notification = NotificationCompat.Builder(this, "SOS_ALERT_CHANNEL")
            .setContentTitle("üö® ALERTA SOS ACTIVADA")
            .setContentText("¬°SE HA PRESIONADO EL BOT√ìN DE P√ÅNICO!")
            .setSmallIcon(android.R.drawable.stat_sys_warning)
            .setPriority(NotificationCompat.PRIORITY_MAX)
            .setCategory(NotificationCompat.CATEGORY_ALARM)
            .setAutoCancel(true)
            .setOngoing(false)
            .setContentIntent(pendingIntent)
            .setFullScreenIntent(fullScreenPendingIntent, true)
            .setVisibility(NotificationCompat.VISIBILITY_PUBLIC)
            .setDefaults(NotificationCompat.DEFAULT_ALL)
            .addAction(
                android.R.drawable.ic_menu_close_clear_cancel,
                "Cerrar Alerta",
                PendingIntent.getActivity(
                    this, 1, notificationIntent,
                    PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE
                )
            )
            .build()

        val notificationManager = getSystemService(NotificationManager::class.java)
        notificationManager.notify(911, notification)

        try {
            startActivity(notificationIntent)
            Log.d("MainActivity", "Actividad lanzada directamente")
        } catch (e: Exception) {
            Log.e("MainActivity", "Error al lanzar actividad: ${e.message}")
        }

        Log.d("MainActivity", "üö® Notificaci√≥n SOS mostrada (ahora es borrable)")
    }

    private fun showFullScreenNotification() {
        val notificationIntent = Intent(this, MainActivity::class.java)
        val pendingIntent = PendingIntent.getActivity(this, 0, notificationIntent, PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE)

        val fullScreenIntent = Intent(this, MainActivity::class.java)
        val fullScreenPendingIntent = PendingIntent.getActivity(this, 0, fullScreenIntent, PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE)

        val notification = NotificationCompat.Builder(this, "SOS_ALERT_CHANNEL")
            .setContentTitle("üö® Alerta SOS Activada")
            .setContentText("Se ha presionado el bot√≥n de p√°nico")
            .setSmallIcon(android.R.drawable.stat_sys_warning)
            .setPriority(NotificationCompat.PRIORITY_HIGH)
            .setCategory(NotificationCompat.CATEGORY_ALARM)
            .setAutoCancel(true)
            .setOngoing(false)
            .setContentIntent(pendingIntent)
            .setFullScreenIntent(fullScreenPendingIntent, true)
            .build()

        val notificationManager = getSystemService(NotificationManager::class.java)
        notificationManager.notify(SOS_NOTIFICATION_ID, notification)
    }

    private fun showBleDisconnectedNotification() {
        val notificationIntent = Intent(this, MainActivity::class.java)
        val pendingIntent = PendingIntent.getActivity(
            this, 0, notificationIntent,
            PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE
        )

        val notification = NotificationCompat.Builder(this, "BLE_STATUS_CHANNEL")
            .setContentTitle("Conexi√≥n BLE Perdida")
            .setContentText("Se ha perdido la conexi√≥n con el dispositivo BLE.")
            .setSmallIcon(android.R.drawable.stat_sys_warning)
            .setPriority(NotificationCompat.PRIORITY_HIGH)
            .setCategory(NotificationCompat.CATEGORY_SERVICE)
            .setAutoCancel(true)
            .setOngoing(false)
            .setContentIntent(pendingIntent)
            .setVisibility(NotificationCompat.VISIBILITY_PUBLIC)
            .build()

        val notificationManager = getSystemService(NotificationManager::class.java)
        notificationManager.notify(BLE_DISCONNECTED_NOTIFICATION_ID, notification)

        Log.d("MainActivity", "üî¥ Notificaci√≥n de desconexi√≥n BLE mostrada")
    }

    private fun showBleConnectedNotification() {
        val notificationIntent = Intent(this, MainActivity::class.java)
        val pendingIntent = PendingIntent.getActivity(
            this, 0, notificationIntent,
            PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE
        )

        val notification = NotificationCompat.Builder(this, "BLE_STATUS_CHANNEL")
            .setContentTitle("Conexi√≥n BLE Establecida")
            .setContentText("Conectado al dispositivo BLE correctamente.")
            .setSmallIcon(android.R.drawable.stat_sys_data_bluetooth)
            .setPriority(NotificationCompat.PRIORITY_HIGH)
            .setCategory(NotificationCompat.CATEGORY_SERVICE)
            .setAutoCancel(true)
            .setOngoing(false)
            .setContentIntent(pendingIntent)
            .setVisibility(NotificationCompat.VISIBILITY_PUBLIC)
            .build()

        val notificationManager = getSystemService(NotificationManager::class.java)
        notificationManager.notify(BLE_CONNECTED_NOTIFICATION_ID, notification)

        Log.d("MainActivity", "üü¢ Notificaci√≥n de conexi√≥n BLE mostrada")
    }

    private fun showLocationConfirmedNotification() {
        val notificationIntent = Intent(this, MainActivity::class.java)
        val pendingIntent = PendingIntent.getActivity(
            this, 0, notificationIntent,
            PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE
        )

        val notification = NotificationCompat.Builder(this, "LOCATION_STATUS_CHANNEL")
            .setContentTitle("Ubicaci√≥n Confirmada")
            .setContentText("El servidor confirm√≥ la recepci√≥n de tu ubicaci√≥n.")
            .setSmallIcon(android.R.drawable.ic_dialog_map)
            .setPriority(NotificationCompat.PRIORITY_HIGH)
            .setCategory(NotificationCompat.CATEGORY_SERVICE)
            .setAutoCancel(true)
            .setOngoing(false)
            .setContentIntent(pendingIntent)
            .setVisibility(NotificationCompat.VISIBILITY_PUBLIC)
            .build()

        val notificationManager = getSystemService(NotificationManager::class.java)
        notificationManager.notify(LOCATION_CONFIRMED_NOTIFICATION_ID, notification)

        Log.d("MainActivity", "üü¢ Notificaci√≥n de ubicaci√≥n confirmada mostrada")
    }

    private fun showLocationFailedNotification() {
        val notificationIntent = Intent(this, MainActivity::class.java)
        val pendingIntent = PendingIntent.getActivity(
            this, 0, notificationIntent,
            PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE
        )

        val notification = NotificationCompat.Builder(this, "LOCATION_STATUS_CHANNEL")
            .setContentTitle("Env√≠o de Ubicaci√≥n Fallido")
            .setContentText("No se pudo confirmar el env√≠o al servidor.")
            .setSmallIcon(android.R.drawable.stat_notify_error)
            .setPriority(NotificationCompat.PRIORITY_HIGH)
            .setCategory(NotificationCompat.CATEGORY_SERVICE)
            .setAutoCancel(true)
            .setOngoing(false)
            .setContentIntent(pendingIntent)
            .setVisibility(NotificationCompat.VISIBILITY_PUBLIC)
            .build()

        val notificationManager = getSystemService(NotificationManager::class.java)
        notificationManager.notify(LOCATION_FAILED_NOTIFICATION_ID, notification)

        Log.d("MainActivity", "üî¥ Notificaci√≥n de fallo de ubicaci√≥n mostrada")
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        // ‚úÖ AGREGAR: Solicitar todas las exenciones cr√≠ticas
        requestAllCriticalExemptions()

        // Crear canales de notificaci√≥n
        val sosChannel = NotificationChannel(
            "SOS_ALERT_CHANNEL",
            "Alerta SOS",
            NotificationManager.IMPORTANCE_HIGH
        )
        sosChannel.enableLights(true)
        sosChannel.lightColor = Color.RED
        sosChannel.enableVibration(true)
        
        val bleStatusChannel = NotificationChannel(
            "BLE_STATUS_CHANNEL",
            "Estado BLE",
            NotificationManager.IMPORTANCE_HIGH
        )
        bleStatusChannel.description = "Notificaciones de estado de conexi√≥n BLE"
        bleStatusChannel.enableLights(true)
        bleStatusChannel.lightColor = Color.BLUE
        bleStatusChannel.enableVibration(true)
        bleStatusChannel.setBypassDnd(false)
        bleStatusChannel.setShowBadge(true)
        
        val locationStatusChannel = NotificationChannel(
            "LOCATION_STATUS_CHANNEL",
            "Estado de Ubicaci√≥n",
            NotificationManager.IMPORTANCE_HIGH
        )
        locationStatusChannel.description = "Notificaciones de estado de env√≠o de ubicaci√≥n"
        locationStatusChannel.enableLights(true)
        locationStatusChannel.lightColor = Color.GREEN
        locationStatusChannel.enableVibration(true)
        locationStatusChannel.setBypassDnd(false)
        locationStatusChannel.setShowBadge(true)
        
        val notificationManager = getSystemService(NotificationManager::class.java)
        notificationManager.createNotificationChannel(sosChannel)
        notificationManager.createNotificationChannel(bleStatusChannel)
        notificationManager.createNotificationChannel(locationStatusChannel)
    }

    // ‚úÖ NUEVO M√âTODO: Solicitar todas las exenciones
    private fun requestAllCriticalExemptions() {
        try {
            Log.d("MainActivity", "üîã Solicitando exenciones cr√≠ticas para supervivencia...")
            
            // 1. Battery Optimization Exemption
            requestBatteryOptimizationExemption()
            
            // 2. Data Saver Exemption  
            requestDataSaverExemption()
            
            // 3. Background App Refresh
            // requestBackgroundAppPermission()   ESTO REGRESAR SI FALLA SIN MOSTRAR PERMISOS
            
            Log.d("MainActivity", "‚úÖ Exenciones solicitadas correctamente")
            
        } catch (e: Exception) {
            Log.e("MainActivity", "‚ùå Error solicitando exenciones: ${e.message}")
        }
    }

    // Battery Optimization
    private fun requestBatteryOptimizationExemption() {
        try {
            val powerManager = getSystemService(Context.POWER_SERVICE) as PowerManager
            if (!powerManager.isIgnoringBatteryOptimizations(packageName)) {
                val intent = Intent(Settings.ACTION_REQUEST_IGNORE_BATTERY_OPTIMIZATIONS).apply {
                    data = Uri.parse("package:$packageName")
                }
                startActivity(intent)
                Log.d("MainActivity", "üîã Solicitando exenci√≥n de optimizaci√≥n de bater√≠a")
            } else {
                Log.d("MainActivity", "‚úÖ Ya tenemos exenci√≥n de bater√≠a")
            }
        } catch (e: Exception) {
            Log.e("MainActivity", "‚ùå Error en battery optimization: ${e.message}")
        }
    }

    // Data Saver Exemption
    private fun requestDataSaverExemption() {
        try {
            if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.N) {
                val intent = Intent(Settings.ACTION_IGNORE_BACKGROUND_DATA_RESTRICTIONS_SETTINGS).apply {
                    data = Uri.parse("package:$packageName")
                }
                startActivity(intent)
                Log.d("MainActivity", "üì° Solicitando exenci√≥n de data saver")
            }
        } catch (e: Exception) {
            Log.e("MainActivity", "‚ùå Error en data saver: ${e.message}")
        }
    }

    // Background App Permission
    private fun requestBackgroundAppPermission() {
        try {
            val intent = Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS).apply {
                data = Uri.parse("package:$packageName")
            }
            startActivity(intent)
            Log.d("MainActivity", "üì± Abriendo configuraci√≥n de la app")
        } catch (e: Exception) {
            Log.e("MainActivity", "‚ùå Error abriendo configuraci√≥n: ${e.message}")
        }
    }

    // ‚úÖ M√âTODO onDestroy() - Esta es la parte cr√≠tica
    override fun onDestroy() {
        Log.d("MainActivity", "üõë MainActivity.onDestroy() - INICIO")
        
        // ‚úÖ MARCAR que la app se est√° cerrando permanentemente
        appIsClosingPermanently = true
        
        // ‚úÖ ENVIAR SE√ëAL A FLUTTER antes de que se desconecte
        try {
            flutterEngine?.dartExecutor?.binaryMessenger?.let { messenger ->
                MethodChannel(messenger, LIFECYCLE_CHANNEL).invokeMethod(
                    "appClosingPermanently", 
                    mapOf("timestamp" to System.currentTimeMillis())
                )
            }
            Log.d("MainActivity", "‚úÖ Se√±al enviada a Flutter")
        } catch (e: Exception) {
            Log.e("MainActivity", "‚ùå Error enviando se√±al a Flutter: ${e.message}")
        }
        
        // ‚úÖ ESPERAR un momento para que Flutter procese
        try {
            Thread.sleep(500) // 500ms para que Flutter reciba y procese
        } catch (e: InterruptedException) {
            Log.w("MainActivity", "Sleep interrumpido")
        }
        
        // ‚úÖ DETENER TODOS LOS SERVICIOS AGRESIVAMENTE
        stopAllForegroundServices()
        
        // ‚úÖ LIMPIAR TODAS LAS NOTIFICACIONES
        clearAllNotifications()
        
        super.onDestroy()
        Log.d("MainActivity", "üèÅ MainActivity.onDestroy() - COMPLETADO")
    }
    
    // ‚úÖ M√âTODO para detener servicios agresivamente
    private fun stopAllForegroundServices() {
        try {
            Log.d("MainActivity", "üõë Deteniendo TODOS los servicios...")
            
            // M√©todo 1: Detener por Intent directo
            val serviceIntent = Intent(this, Class.forName("com.pravera.flutter_foreground_task.service.ForegroundService"))
            serviceIntent.putExtra("FORCE_STOP", true)
            serviceIntent.putExtra("STOP_PERMANENTLY", true)
            serviceIntent.putExtra("APP_CLOSING", true)
            stopService(serviceIntent)
            
            // M√©todo 2: Detener por ComponentName
            val componentName = ComponentName(
                "com.miempresa.ble_sos_ap",
                "com.pravera.flutter_foreground_task.service.ForegroundService"
            )
            val stopIntent = Intent().apply {
                component = componentName
                putExtra("FORCE_STOP", true)
            }
            stopService(stopIntent)
            
            // M√©todo 3: Forzar detenci√≥n de cualquier servicio con nuestro packageName
            val activityManager = getSystemService(Context.ACTIVITY_SERVICE) as ActivityManager
            val runningServices = activityManager.getRunningServices(Integer.MAX_VALUE)
            
            for (service in runningServices) {
                if (service.service.packageName == packageName) {
                    Log.d("MainActivity", "üéØ Encontrado servicio: ${service.service.className}")
                    val forceStopIntent = Intent().apply {
                        component = service.service
                        putExtra("FORCE_STOP", true)
                    }
                    stopService(forceStopIntent)
                }
            }
            
            Log.d("MainActivity", "‚úÖ Servicios detenidos con m√∫ltiples m√©todos")
            
        } catch (e: Exception) {
            Log.e("MainActivity", "‚ùå Error deteniendo servicios: ${e.message}")
        }
    }
    
    // ‚úÖ M√âTODO para limpiar notificaciones
    private fun clearAllNotifications() {
        try {
            val notificationManager = getSystemService(NotificationManager::class.java)
            
            // Cancelar notificaciones espec√≠ficas
            notificationManager.cancel(SOS_NOTIFICATION_ID)
            notificationManager.cancel(BLE_DISCONNECTED_NOTIFICATION_ID)
            notificationManager.cancel(BLE_CONNECTED_NOTIFICATION_ID)
            notificationManager.cancel(LOCATION_CONFIRMED_NOTIFICATION_ID)
            notificationManager.cancel(LOCATION_FAILED_NOTIFICATION_ID)
            
            // Cancelar notificaci√≥n del servicio persistente (IDs comunes de flutter_foreground_task)
            notificationManager.cancel(1000) // ID t√≠pico de flutter_foreground_task
            notificationManager.cancel(1001) // Backup ID
            notificationManager.cancel(2000) // Otro ID posible
            
            // Cancelar TODAS las notificaciones como medida final
            notificationManager.cancelAll()
            
            Log.d("MainActivity", "‚úÖ TODAS las notificaciones eliminadas")
            
        } catch (e: Exception) {
            Log.e("MainActivity", "‚ùå Error eliminando notificaciones: ${e.message}")
        }
    }
    
    override fun onPause() {
        super.onPause()
        // NO hacer nada aqu√≠ - solo cuando realmente se cierre la app
    }
    
    override fun onStop() {
        super.onStop()
        // NO hacer nada aqu√≠ - solo cuando realmente se cierre la app
    }

    private fun forceStopAllServicesNuclear() {
        Log.d("MainActivity", "üî• === DETENCI√ìN NUCLEAR NATIVA ===")
        
        try {
            val activityManager = getSystemService(Context.ACTIVITY_SERVICE) as ActivityManager
            
            // Obtener TODOS los servicios ejecut√°ndose
            val runningServices = activityManager.getRunningServices(Integer.MAX_VALUE)
            
            Log.d("MainActivity", "üîç Servicios ejecut√°ndose: ${runningServices.size}")
            
            // Detener CUALQUIER servicio de nuestro package
            for (service in runningServices) {
                if (service.service.packageName == packageName) {
                    Log.d("MainActivity", "üéØ DETENIENDO NUCLEAR: ${service.service.className}")
                    
                    // M√©todo 1: stopService directo
                    val stopIntent = Intent().apply {
                        component = service.service
                        putExtra("NUCLEAR_STOP", true)
                        putExtra("FORCE_STOP", true)
                        putExtra("PERMANENT_STOP", true)
                    }
                    stopService(stopIntent)
                    
                    // M√©todo 2: killBackgroundProcesses (m√°s agresivo)
                    try {
                        activityManager.killBackgroundProcesses(service.service.packageName)
                        Log.d("MainActivity", "üíÄ killBackgroundProcesses ejecutado para ${service.service.packageName}")
                    } catch (e: Exception) {
                        Log.e("MainActivity", "‚ùå Error en killBackgroundProcesses: ${e.message}")
                    }
                }
            }
            
            // M√©todo 3: Detener por nombres espec√≠ficos conocidos
            val knownServiceNames = listOf(
                "com.pravera.flutter_foreground_task.service.ForegroundService",
                "FlutterForegroundService",
                "ForegroundTaskService"
            )
            
            for (serviceName in knownServiceNames) {
                try {
                    val intent = Intent().apply {
                        setClassName(packageName, serviceName)
                        putExtra("NUCLEAR_STOP", true)
                    }
                    stopService(intent)
                    Log.d("MainActivity", "üéØ Intento detener servicio espec√≠fico: $serviceName")
                } catch (e: Exception) {
                    Log.d("MainActivity", "‚ÑπÔ∏è Servicio $serviceName no encontrado o ya detenido")
                }
            }
            
            // M√©todo 4: Limpiar notificaciones AGRESIVAMENTE
            val notificationManager = getSystemService(NotificationManager::class.java)
            notificationManager.cancelAll()
            
            // Tambi√©n cancelar por IDs espec√≠ficos conocidos de flutter_foreground_task
            for (id in 1000..1010) {
                notificationManager.cancel(id)
            }
            
            Log.d("MainActivity", "‚úÖ DETENCI√ìN NUCLEAR NATIVA COMPLETADA")
            
        } catch (e: Exception) {
            Log.e("MainActivity", "‚ùå Error en detenci√≥n nuclear nativa: ${e.message}")
        }
    }
}