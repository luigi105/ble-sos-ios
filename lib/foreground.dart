import 'dart:async';
import 'dart:isolate';
import 'package:flutter_foreground_task/flutter_foreground_task.dart';
import 'package:flutter_blue_plus/flutter_blue_plus.dart';
import 'ble_data.dart';
import 'package:connectivity_plus/connectivity_plus.dart';
import 'coms.dart';
import 'package:flutter/services.dart';

// Funci√≥n que se ejecuta en el aislamiento del servicio en primer plano
@pragma('vm:entry-point')
void startCallback() {
  // El aislamiento que ejecuta el servicio en primer plano
  FlutterForegroundTask.setTaskHandler(BleReconnectionTaskHandler());
}

// Manejador de tareas para el servicio en primer plano
class BleReconnectionTaskHandler extends TaskHandler {
  Timer? _timer;
  SendPort? _sendPort;
  static SendPort? _staticSendPort;
  
 @override
  Future<void> onStart(DateTime timestamp, SendPort? sendPort) async {
    _sendPort = sendPort;
    _staticSendPort = sendPort; // Guardar en variable est√°tica
    
    // Iniciar un timer para verificar la conexi√≥n peri√≥dicamente
    _timer = Timer.periodic(const Duration(seconds: 30), (timer) {
      _checkAndReconnect();
    });
    return;
  }

   static void sendMessage(String message) {
    if (_staticSendPort != null) {
      _staticSendPort!.send(message);
    }
  }
  
  void _checkAndReconnect() async {
    // Solo enviamos un mensaje para que la app principal intente reconectar
    if (_sendPort != null) {
      _sendPort!.send('RECONNECT');
    }
  }
  
    @override
  Future<void> onDestroy(DateTime timestamp, SendPort? sendPort) async {
    _timer?.cancel();
    return;
  }
  
  // A√±adimos este m√©todo que faltaba
  @override
  Future<void> onRepeatEvent(DateTime timestamp, SendPort? sendPort) async {
    // No hacemos nada aqu√≠ para evitar actualizaciones constantes de la notificaci√≥n
    return;
  }
}

class ForegroundService {
  static bool isRunning = false;
  static Timer? reconnectionTimer;
  static Timer? checkConnectionTimer;
  static ReceivePort? _receivePort;
  static Function? locationServiceCallback;
  
  static Future<void> initForegroundTask() async {
    // Configurar el servicio en primer plano con notificaci√≥n m√≠nima
    FlutterForegroundTask.init(
      androidNotificationOptions: AndroidNotificationOptions(
        channelId: 'ble_sos_service',
        channelName: 'BLE SOS Service',
        channelDescription: 'Servicio de conexi√≥n BLE',
        channelImportance: NotificationChannelImportance.LOW,
        priority: NotificationPriority.LOW,
        enableVibration: false,
        playSound: false,
        iconData: const NotificationIconData(
          resType: ResourceType.mipmap,
          resPrefix: ResourcePrefix.ic,
          name: 'launcher',
        ),
      ),
      iosNotificationOptions: const IOSNotificationOptions(
        showNotification: true,
        playSound: false,
      ),
      foregroundTaskOptions: const ForegroundTaskOptions(
        interval: 5000,
        isOnceEvent: false,
        autoRunOnBoot: true,
        allowWakeLock: true,
        allowWifiLock: true,
      ),
    );
    
    // Iniciar el servicio con una notificaci√≥n b√°sica
    bool serviceStarted = await FlutterForegroundTask.startService(
      notificationTitle: 'BLE SOS Service',
      notificationText: 'Servicio activo',
      callback: startCallback,
    );
    
    if (serviceStarted) {
      _receivePort = FlutterForegroundTask.receivePort;
      _listenToBackgroundMessages();
    }
  }
  
   
  static void _listenToBackgroundMessages() {
    _receivePort?.listen((message) {
      if (message == 'RECONNECT') {
        // Recibimos mensaje del servicio en primer plano para intentar reconectar
        attemptReconnection();
      } else if (message == 'SEND_LOCATION') {
        // Ejecutar el callback si est√° registrado
        if (locationServiceCallback != null) {
          locationServiceCallback!();
        }
      }
    });
  }


// M√©todo para registrar el callback
static void registerLocationServiceCallback(Function callback) {
  locationServiceCallback = callback;
}


// ‚úÖ REEMPLAZAR startForegroundTask() en foreground.dart para prevenir auto-restart

static Future<void> startForegroundTask() async {
  if (isRunning) return;
  
  print("üöÄ Iniciando servicio ULTRA-AGRESIVO para supervivencia...");
  
  // ‚úÖ CONFIGURACI√ìN ULTRA-AGRESIVA
  FlutterForegroundTask.init(
    androidNotificationOptions: AndroidNotificationOptions(
      channelId: 'ble_sos_critical_survival', 
      channelName: 'üö® Servicio Cr√≠tico SOS',
      channelDescription: 'SERVICIO DE EMERGENCIA - NO DESACTIVAR - Requerido para funcionamiento 24/7',
      channelImportance: NotificationChannelImportance.MAX, // ‚úÖ M√ÅXIMA prioridad
      priority: NotificationPriority.MAX,                   // ‚úÖ M√ÅXIMA prioridad
      enableVibration: false,
      playSound: false,
      isSticky: true,        // ‚úÖ CR√çTICO: Notificaci√≥n pegajosa
      showWhen: true,        // ‚úÖ Mostrar timestamp
      visibility: NotificationVisibility.VISIBILITY_PUBLIC, // ‚úÖ Siempre visible
      iconData: const NotificationIconData(
        resType: ResourceType.mipmap,
        resPrefix: ResourcePrefix.ic,
        name: 'launcher',
      ),
      buttons: [
        // ‚úÖ Bot√≥n para mantener activo
        const NotificationButton(
          id: 'keep_alive', 
          text: 'üî• Mantener Activo'
        ),
        const NotificationButton(
          id: 'status_check', 
          text: 'üìä Ver Estado'
        ),
      ],
    ),
    iosNotificationOptions: const IOSNotificationOptions(
      showNotification: true,
      playSound: false,
    ),
    foregroundTaskOptions: const ForegroundTaskOptions(
      interval: 15000,          // ‚úÖ REDUCIDO: 15 segundos (m√°s agresivo)
      isOnceEvent: false,
      autoRunOnBoot: true,      // ‚úÖ ACTIVADO: Auto-iniciar en boot
      allowWakeLock: true,      // ‚úÖ MANTENER: Wake lock
      allowWifiLock: true,      // ‚úÖ MANTENER: WiFi lock
    ),
  );
  
  String notificationTitle = BleData.conBoton == 1 
    ? 'üö® BLE SOS - Servicio Cr√≠tico Activo' 
    : 'üö® SOS Ubicaci√≥n - Servicio Cr√≠tico Activo';
    
  String notificationText = BleData.conBoton == 1
    ? 'üîµ BLE Conectado | üì° Ubicaci√≥n Activa | üîã Monitoreando'
    : 'üì° Ubicaci√≥n GPS Activa | üö® Sistema SOS Operativo';
  
  bool serviceStarted = await FlutterForegroundTask.startService(
    notificationTitle: notificationTitle,
    notificationText: notificationText,
    callback: startCallback,
  );
  
  if (serviceStarted) {
    _receivePort = FlutterForegroundTask.receivePort;
    _listenToBackgroundMessages();
    print("‚úÖ Servicio ULTRA-AGRESIVO iniciado: $notificationTitle");
  } else {
    print("‚ùå Error al iniciar servicio ULTRA-AGRESIVO");
  }
  
  isRunning = true;
  startConnectionMonitoring();
}

// ‚úÖ REEMPLAZAR stopForegroundTask() - VERSI√ìN NUCLEAR
static void stopForegroundTask() async {
  print("üõë === INICIANDO DETENCI√ìN NUCLEAR ===");
  
  // ‚úÖ MARCAR como detenido ANTES de cualquier cosa
  isRunning = false;
  
  // ‚úÖ CANCELAR ABSOLUTAMENTE TODO
  try {
    reconnectionTimer?.cancel();
    reconnectionTimer = null;
    checkConnectionTimer?.cancel();
    checkConnectionTimer = null;
    _receivePort?.close();
    _receivePort = null;
    locationServiceCallback = null;
    print("‚úÖ Todos los recursos internos cancelados");
  } catch (e) {
    print("‚ùå Error cancelando recursos: $e");
  }
  
  // ‚úÖ DETENCI√ìN AGRESIVA CON M√öLTIPLES M√âTODOS
  try {
    for (int attempt = 1; attempt <= 10; attempt++) { // ‚úÖ Aumentar a 10 intentos
      print("üîÑ INTENTO NUCLEAR $attempt/10...");
      
      // Verificar estado actual
      bool serviceRunning = await FlutterForegroundTask.isRunningService;
      print("üîç ¬øServicio ejecut√°ndose?: $serviceRunning");
      
      if (!serviceRunning) {
        print("‚úÖ SERVICIO DETENIDO en intento $attempt");
        break;
      }
      
      // ‚úÖ M√âTODO 1: stopService normal
      try {
        bool stopped = await FlutterForegroundTask.stopService();
        print("üîÑ stopService() resultado: $stopped");
      } catch (e) {
        print("‚ùå Error en stopService(): $e");
      }
      
      // ‚úÖ M√âTODO 2: Intentar detener usando plataforma nativa si es intento > 5
      if (attempt > 5) {
        try {
          print("üî• M√âTODO NUCLEAR: Forzando detenci√≥n nativa...");
          
          // Usar MethodChannel para enviar orden de detenci√≥n nativa
          const MethodChannel('com.miempresa.ble_sos_ap/lifecycle')
              .invokeMethod('forceStopAllServices');
          
        } catch (e) {
          print("‚ùå Error en detenci√≥n nativa: $e");
        }
      }
      
      // Esperar progresivamente m√°s tiempo
      int waitTime = attempt * 300; // 300ms, 600ms, 900ms, etc.
      await Future.delayed(Duration(milliseconds: waitTime));
      
      // Verificar resultado final
      bool stillRunning = await FlutterForegroundTask.isRunningService;
      if (!stillRunning) {
        print("‚úÖ SERVICIO FINALMENTE DETENIDO en intento $attempt");
        break;
      }
      
      if (attempt == 10) {
        print("üö® ADVERTENCIA CR√çTICA: Servicio SIGUE ejecut√°ndose despu√©s de 10 intentos nucleares");
        print("üö® Esto podr√≠a requerir reinicio del dispositivo o intervenci√≥n manual");
      }
    }
    
  } catch (e) {
    print("‚ùå Error durante detenci√≥n nuclear: $e");
  }
  
  print("üõë === DETENCI√ìN NUCLEAR COMPLETADA ===");
}


// A√±adir este m√©todo nuevo para verificar si el servicio realmente est√° ejecut√°ndose:

static Future<bool> isServiceRunning() async {
  try {
    return await FlutterForegroundTask.isRunningService;
  } catch (e) {
    print("Error al verificar estado del servicio: $e");
    return false;
  }
}


static Future<void> forceStopAllServices() async {
  print("üö® Forzando detenci√≥n de todos los servicios...");
  
  try {
    // Detener cualquier servicio ejecut√°ndose
    await FlutterForegroundTask.stopService();
    
    // Esperar un momento
    await Future.delayed(Duration(milliseconds: 500));
    
    // Verificar si sigue ejecut√°ndose
    bool stillRunning = await FlutterForegroundTask.isRunningService;
    if (stillRunning) {
      print("‚ö†Ô∏è Servicio sigue activo, intentando detenci√≥n adicional...");
      await FlutterForegroundTask.stopService();
    }
    
    // Limpiar todas las variables
    reconnectionTimer?.cancel();
    checkConnectionTimer?.cancel();
    _receivePort?.close();
    _receivePort = null;
    locationServiceCallback = null;
    isRunning = false;
    
    print("‚úÖ Limpieza forzada completada");
  } catch (e) {
    print("‚ùå Error durante limpieza forzada: $e");
  }
}

  
  // Iniciar un monitor de conexi√≥n que funcione incluso en modo Doze
 static void startConnectionMonitoring() {
  checkConnectionTimer?.cancel();
  
  print("üöÄ Iniciando monitoreo ULTRA-AGRESIVO...");
  
  // ‚úÖ MONITOREO M√ÅS FRECUENTE - 15 segundos
  if (BleData.conBoton == 1) {
    checkConnectionTimer = Timer.periodic(const Duration(seconds: 15), (timer) async {
      print("üîç [ULTRA] Verificando BLE cada 15s...");
      if (!BleData.isConnected) {
        print("üîÑ [ULTRA] Detectada desconexi√≥n BLE - Reconectando...");
        attemptReconnection();
      } else {
        print("‚úÖ [ULTRA] BLE conectado OK");
      }
    });
  } else {
    // Para conBoton == 2, verificar internet cada 20 segundos
    checkConnectionTimer = Timer.periodic(const Duration(seconds: 20), (timer) async {
      print("üîç [ULTRA] Verificando internet cada 20s...");
      
      try {
        bool hasInternet = await checkInternetConnection();
        if (hasInternet) {
          print("üì° [ULTRA] Internet OK - Enviando ubicaci√≥n...");
          sendLocationFromService();
        } else {
          print("‚ö†Ô∏è [ULTRA] Sin internet detectado");
        }
      } catch (e) {
        print("‚ùå [ULTRA] Error verificando internet: $e");
      }
    });
  }
  
  print("‚úÖ Monitoreo ULTRA-AGRESIVO configurado");
}


static Future<bool> checkInternetConnection() async {
    try {
      var connectivityResult = await Connectivity().checkConnectivity();
      return connectivityResult != ConnectivityResult.none;
    } catch (e) {
      print("Error al verificar conectividad: $e");
      return false;
    }
  }

// M√©todo para solicitar el env√≠o de ubicaci√≥n desde el servicio
  static void sendLocationFromService() {
    if (locationServiceCallback != null) {
      locationServiceCallback!();
    }
  }
  
  static Future<void> attemptReconnection() async {
  // Si conBoton != 1, no intentar reconectar
  if (BleData.conBoton != 1) return;
  
  // Verificar primero si ya estamos conectados
  if (BleData.isConnected) {
    print("‚úÖ Ya estamos conectados, no es necesario intentar reconexi√≥n");
    return;
  }
  
  // Verificar si necesitamos incrementar el contador en el servicio en primer plano
  BleData.reconnectionAttemptCount++;
  print("üîÑ [Servicio] Intentando reconectar BLE... Intento #${BleData.reconnectionAttemptCount}/${BleData.maxReconnectionAttemptsBeforeNotification}");
  
  // Si alcanzamos el umbral, mostrar notificaci√≥n (si est√° permitido)
  if (BleData.reconnectionAttemptCount == BleData.maxReconnectionAttemptsBeforeNotification && 
      BleData.bleNotificationsEnabled) {
    print("üì± [Servicio] NOTIFICACI√ìN DE DESCONEXI√ìN BLE - Intento #${BleData.reconnectionAttemptCount}");
    
    // Configurar la bandera ANTES de mostrar la notificaci√≥n
    BleData.bleDisconnectionNotificationShown = true;
    BleData.markDisconnectionNotificationShown();
    print("üîî [Servicio] Bandera bleDisconnectionNotificationShown configurada a true");
    
    // Usar el handler de la app principal para mostrar la notificaci√≥n
    CommunicationService().showBleDisconnectedNotification();
  }
  
   try {
    // Verificar estado del adaptador Bluetooth
    if (await FlutterBluePlus.adapterState.first != BluetoothAdapterState.on) {
      print("‚ö†Ô∏è Bluetooth apagado, no se puede reconectar");
      try {
        await FlutterBluePlus.turnOn();
        // Esperar a que se encienda
        await Future.delayed(const Duration(seconds: 2));
      } catch (e) {
        print("‚ùå No se pudo activar Bluetooth: $e");
        return;
      }
    }
    
    // Verificar si ya est√° reconectado (puede haber cambiado mientras tanto)
    List<BluetoothDevice> connectedDevices = await FlutterBluePlus.connectedDevices;
    for (var device in connectedDevices) {
      if (device.remoteId.toString() == BleData.macAddress) {
        print("‚úÖ Dispositivo ya conectado: ${device.remoteId}");
        BleData.update(
          newMacAddress: device.remoteId.toString(),
          connectionStatus: true,
        );
        BleData.reconnectionAttemptCount = 0;
        BleData.bleDisconnectionNotificationShown = false;  // Resetear el flag cuando la conexi√≥n se restablece
        print("‚úÖ Reconexi√≥n exitosa. Contador reiniciado: 0");
        return;
      }
    }
    
    // Buscar el dispositivo guardado
    print("üîç Buscando dispositivo: ${BleData.macAddress}");
    
    // Detener cualquier escaneo anterior
    try {
      await FlutterBluePlus.stopScan();
    } catch (e) {
      print("Advertencia al detener escaneo: $e");
    }
    
    // Comenzar nuevo escaneo
    await FlutterBluePlus.startScan(timeout: const Duration(seconds: 5));
    
    // Escuchar resultados del escaneo
    StreamSubscription? scanSubscription;
    scanSubscription = FlutterBluePlus.scanResults.listen((results) {
      for (var result in results) {
        if (result.device.remoteId.toString() == BleData.macAddress) {
          FlutterBluePlus.stopScan();
          scanSubscription?.cancel();
          
          // Intentar conectar
          result.device.connect(timeout: const Duration(seconds: 30)).then((_) {
            print("‚úÖ Reconexi√≥n exitosa desde servicio en primer plano");
            BleData.update(
              newMacAddress: result.device.remoteId.toString(),
              connectionStatus: true,
            );
            
            // Reiniciar contador al conectar exitosamente
            BleData.reconnectionAttemptCount = 0;
            BleData.bleDisconnectionNotificationShown = false;  // Resetear el flag cuando la conexi√≥n se restablece
            print("‚úÖ Contador de intentos de reconexi√≥n reiniciado: 0");
            
            // Descubrir servicios
            result.device.discoverServices();
          }).catchError((e) {
            print("‚ùå Error en reconexi√≥n desde servicio: $e");
            BleData.update(connectionStatus: false);
          });
        }
      }
    });
    
    // Asegurarnos de detener el escaneo despu√©s de un tiempo
    Future.delayed(const Duration(seconds: 8), () {
      try {
        FlutterBluePlus.stopScan();
      } catch (e) {
        print("Error al detener escaneo en timeout: $e");
      }
      scanSubscription?.cancel();
    });
    
  } catch (e) {
    print("Error en attemptReconnection: $e");
  }
}
}