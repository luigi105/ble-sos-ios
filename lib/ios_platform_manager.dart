// ============================================================================
// ARCHIVO: ios_platform_manager.dart - VERSI√ìN CORREGIDA CON IMPORTS
// ============================================================================

import 'dart:async';
import 'dart:io';
import 'package:flutter_blue_plus/flutter_blue_plus.dart';
import 'package:geolocator/geolocator.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart'; // ‚úÖ IMPORT CR√çTICO
import 'package:url_launcher/url_launcher.dart';
import 'package:permission_handler/permission_handler.dart';
import 'ble_data.dart';
import 'coms.dart';
import 'package:audioplayers/audioplayers.dart';


class IOSPlatformManager {
  static bool _isInitialized = false;
  static StreamSubscription<Position>? _locationSubscription;
  static FlutterLocalNotificationsPlugin? _localNotifications;
  static DateTime? _lastLocationSent;
  static const Duration _minimumLocationInterval = Duration(minutes: 5);
  
  // ‚úÖ INICIALIZACI√ìN ESPEC√çFICA PARA iOS
  static Future<void> initialize() async {
    if (_isInitialized || !Platform.isIOS) return;
    
    print("üçé Inicializando iOS Platform Manager...");
    
    try {
      // 1. Configurar notificaciones locales
      await _setupLocalNotifications();
      
      // 2. Configurar seguimiento de ubicaci√≥n significativa
      await _setupSignificantLocationChanges();
      
      // 3. Configurar manejo de ciclo de vida de la app
      _setupAppLifecycleHandling();
      
      _isInitialized = true;
      print("‚úÖ iOS Platform Manager inicializado exitosamente");
      
    } catch (e) {
      print("‚ùå Error inicializando iOS Platform Manager: $e");
    }
  }
  
  // ‚úÖ CONFIGURAR NOTIFICACIONES LOCALES
  static Future<void> _setupLocalNotifications() async {
    _localNotifications = FlutterLocalNotificationsPlugin();
    
    // ‚úÖ CONFIGURACI√ìN ESPEC√çFICA iOS
    const DarwinInitializationSettings iosSettings = DarwinInitializationSettings(
      requestAlertPermission: true,
      requestBadgePermission: true,
      requestSoundPermission: true,
      requestCriticalPermission: true, // Para emergencias cr√≠ticas
    );
    
    const InitializationSettings settings = InitializationSettings(
      iOS: iosSettings,
    );
    
    await _localNotifications!.initialize(settings);
    
    // Solicitar permisos expl√≠citamente para iOS
    await _localNotifications!
        .resolvePlatformSpecificImplementation<IOSFlutterLocalNotificationsPlugin>()
        ?.requestPermissions(
          alert: true,
          badge: true,
          sound: true,
          critical: true, // Para alertas de emergencia
        );
    
    print("‚úÖ Notificaciones locales iOS configuradas");
  }
  
  // ‚úÖ CONFIGURAR CAMBIOS SIGNIFICATIVOS DE UBICACI√ìN
static Future<void> _setupSignificantLocationChanges() async {
  print("üìç Configurando seguimiento de ubicaci√≥n cada 100m para iOS...");
  
  // Verificar permisos
  LocationPermission permission = await Geolocator.checkPermission();
  if (permission == LocationPermission.denied || permission == LocationPermission.deniedForever) {
    print("‚ùå Permisos de ubicaci√≥n no otorgados para iOS");
    return;
  }
  
  // ‚úÖ CONFIGURACI√ìN PARA 100 METROS (tu geofence de 200m)
  const LocationSettings locationSettings = LocationSettings(
    accuracy: LocationAccuracy.high, // ‚úÖ Alta precisi√≥n para geofence de 200m
    distanceFilter: 100, // ‚úÖ iOS enviar√° actualizaci√≥n cada 100+ metros
    timeLimit: Duration(minutes: 5), // ‚úÖ Timeout si no hay cambios
  );
  
  _locationSubscription = Geolocator.getPositionStream(
    locationSettings: locationSettings,
  ).listen(
    _handleSignificantLocationChange,
    onError: (error) {
      print("‚ùå Error en stream de ubicaci√≥n iOS: $error");
    },
  );
  
  print("‚úÖ iOS configurado para enviar ubicaci√≥n cada 100+ metros");
}
  
  // ‚úÖ MANEJAR CAMBIO SIGNIFICATIVO DE UBICACI√ìN
  static Future<void> _handleSignificantLocationChange(Position position) async {
    print("üìç Cambio significativo de ubicaci√≥n detectado en iOS:");
    print("   Lat: ${position.latitude}, Lng: ${position.longitude}");
    print("   Precisi√≥n: ${position.accuracy}m");
    
    // Evitar env√≠os demasiado frecuentes
    DateTime now = DateTime.now();
    if (_lastLocationSent != null) {
      Duration timeSinceLastSent = now.difference(_lastLocationSent!);
      if (timeSinceLastSent < _minimumLocationInterval) {
        print("‚è≥ Ubicaci√≥n muy reciente, esperando ${_minimumLocationInterval.inMinutes - timeSinceLastSent.inMinutes} minutos m√°s");
        return;
      }
    }
    
    try {
      // Enviar ubicaci√≥n al servidor usando el servicio existente
      await _sendLocationToServer(position);
      _lastLocationSent = now;
      
      // Actualizar estado de confirmaci√≥n de ubicaci√≥n
      BleData.setLocationConfirmed(true);
      
    } catch (e) {
      print("‚ùå Error enviando ubicaci√≥n desde iOS: $e");
      BleData.setLocationConfirmed(false);
    }
  }
  
  // ‚úÖ ENVIAR UBICACI√ìN AL SERVIDOR (iOS)
  static Future<void> _sendLocationToServer(Position position) async {
    try {
      String northSouth = position.latitude >= 0 ? "North" : "South";
      String eastWest = position.longitude >= 0 ? "East" : "West";
      String bleMacAddress = BleData.conBoton == 2 ? "N/A" : BleData.macAddress;
      String activo = BleData.conBoton == 2 ? "0" : (BleData.isConnected ? "1" : "0");
      int batteryLevel = BleData.conBoton == 2 ? 0 : BleData.batteryLevel;
      
      final response = await CommunicationService().sendLocation(
        BleData.imei,
        position.latitude.abs(),
        position.longitude.abs(),
        northSouth,
        eastWest,
        bleMacAddress,
        activo,
        batteryLevel,
        "1", // cellOnline
      );
      
      if (response.statusCode == 200) {
        print("‚úÖ Ubicaci√≥n iOS enviada exitosamente");
      } else {
        throw Exception("Error HTTP: ${response.statusCode}");
      }
      
    } catch (e) {
      print("‚ùå Error enviando ubicaci√≥n iOS: $e");
      throw e;
    }
  }
  
  // ‚úÖ CONFIGURAR BLE PARA iOS (Auto-reconnect)
  static Future<void> setupiOSBLE(BluetoothDevice device) async {
    print("üîµ Configurando BLE espec√≠fico para iOS...");
    
    try {
      // Conectar con autoConnect habilitado (cr√≠tico para iOS)
      await device.connect(
        autoConnect: true, // iOS manejar√° reconexi√≥n autom√°ticamente
        timeout: const Duration(seconds: 30),
      );
      
      // Configurar listener permanente para estado de conexi√≥n
      device.connectionState.listen((state) {
        print("üîµ Estado BLE iOS: $state");
        
        if (state == BluetoothConnectionState.connected) {
          print("‚úÖ BLE conectado en iOS - Configurando notificaciones...");
          _setupBLENotifications(device);
          BleData.update(connectionStatus: true);
        } else {
          print("‚ö†Ô∏è BLE desconectado en iOS - iOS intentar√° reconectar autom√°ticamente");
          BleData.update(connectionStatus: false);
        }
      });
      
      print("‚úÖ BLE iOS configurado con auto-reconnect");
      
    } catch (e) {
      print("‚ùå Error configurando BLE iOS: $e");
      throw e;
    }
  }
  
  // ‚úÖ CONFIGURAR NOTIFICACIONES BLE
  static Future<void> _setupBLENotifications(BluetoothDevice device) async {
    try {
      List<BluetoothService> services = await device.discoverServices();
      
      for (var service in services) {
        if (service.uuid.toString().toLowerCase() == '6e400001-b5a3-f393-e0a9-e50e24dcca9e') {
          for (var characteristic in service.characteristics) {
            if (characteristic.properties.notify) {
              await characteristic.setNotifyValue(true);
              
              // ‚úÖ CRITICAL: Este listener funcionar√° incluso desde background en iOS
              characteristic.value.listen((value) {
                if (value.isNotEmpty && value.length >= 5) {
                  print("üîµ Datos BLE recibidos en iOS: $value");
                  
                  // Detectar bot√≥n SOS presionado
                  if (value[4] == 1) {
                    print("üö® BOT√ìN SOS PRESIONADO EN iOS!");
                    _handleEmergencyIOS();
                  }
                }
              });
              
              print("‚úÖ Notificaciones BLE configuradas para iOS");
            }
          }
        }
      }
    } catch (e) {
      print("‚ùå Error configurando notificaciones BLE: $e");
    }
  }
  
  // ‚úÖ MANEJAR EMERGENCIA EN iOS (30 segundos disponibles)
static Future<void> _handleEmergencyIOS() async {
  print("üö® === MANEJO DE EMERGENCIA iOS - 30 segundos disponibles ===");
  
  try {
    // 1. REPRODUCIR SONIDO SOS INMEDIATAMENTE
    print("üîä Reproduciendo sonido SOS...");
    await playSosAudioBackground();
    
    // 2. Obtener ubicaci√≥n r√°pidamente (5-8 segundos)
    Position? position;
    try {
      position = await Geolocator.getCurrentPosition(
        desiredAccuracy: LocationAccuracy.high,
      ).timeout(const Duration(seconds: 8)); // ‚úÖ Reducido para dar m√°s tiempo al audio
      print("üìç Ubicaci√≥n obtenida: ${position.latitude}, ${position.longitude}");
    } catch (e) {
      print("‚ö†Ô∏è Error obteniendo ubicaci√≥n: $e");
    }
    
    // 3. Enviar alerta SOS al servidor (5-8 segundos)
    try {
      await CommunicationService().sendSosAlert(BleData.macAddress);
      print("‚úÖ Alerta SOS enviada al servidor");
      
      if (position != null) {
        await _sendLocationToServer(position);
        print("‚úÖ Ubicaci√≥n de emergencia enviada");
      }
    } catch (e) {
      print("‚ö†Ô∏è Error enviando alerta: $e");
    }
    
    // 4. Mostrar notificaci√≥n cr√≠tica adicional
    await showCriticalBleNotification(
      "üö® SOS ACTIVADO", 
      "Alerta enviada desde dispositivo BLE. Ubicaci√≥n transmitida.",
    );
    
    // 5. Hacer llamada telef√≥nica autom√°tica
    if (BleData.autoCall && BleData.sosNumber != "UNKNOWN_SOS") {
      try {
        final Uri phoneUri = Uri.parse("tel://${BleData.sosNumber}");
        if (await canLaunchUrl(phoneUri)) {
          await launchUrl(phoneUri);
          print("üìû Llamada SOS iniciada a ${BleData.sosNumber}");
        }
      } catch (e) {
        print("‚ö†Ô∏è Error iniciando llamada: $e");
      }
    }
    
    print("‚úÖ Emergencia iOS procesada con audio SOS");
    
  } catch (e) {
    print("‚ùå Error cr√≠tico procesando emergencia iOS: $e");
    
    // Fallback: Al menos reproducir sonido de emergencia
    await playSosAudioBackground();
  }
  
  print("üö® === FIN MANEJO DE EMERGENCIA iOS ===");
}
  
  // ‚úÖ MOSTRAR NOTIFICACI√ìN DE EMERGENCIA
  static Future<void> showEmergencyNotification({bool isError = false}) async {
    if (_localNotifications == null) return;
    
    try {
      // ‚úÖ CONFIGURACI√ìN ACTUALIZADA PARA NUEVAS VERSIONES
      const DarwinNotificationDetails iosDetails = DarwinNotificationDetails(
        presentAlert: true,
        presentBadge: true,
        presentSound: true,
        interruptionLevel: InterruptionLevel.critical, // Cr√≠tico para emergencias
        categoryIdentifier: 'SOS_EMERGENCY',
      );
      
      const NotificationDetails details = NotificationDetails(iOS: iosDetails);
      
      String title = isError ? "üö® SOS - Error" : "üö® ALERTA SOS ACTIVADA";
      String body = isError 
          ? "Error enviando alerta. Contacte manualmente." 
          : "Alerta de emergencia enviada. Ubicaci√≥n: ${DateTime.now().toString().substring(11, 16)}";
      
      await _localNotifications!.show(
        999, // ID √∫nico para emergencias
        title,
        body,
        details,
      );
      
      print("‚úÖ Notificaci√≥n de emergencia mostrada");
      
    } catch (e) {
      print("‚ùå Error mostrando notificaci√≥n de emergencia: $e");
    }
  }
  
  // ‚úÖ CONFIGURAR MANEJO DE CICLO DE VIDA
  static void _setupAppLifecycleHandling() {
    // En iOS, no necesitamos manejo complejo de ciclo de vida
    // iOS mantendr√° BLE y ubicaci√≥n funcionando autom√°ticamente
    print("‚úÖ Ciclo de vida iOS configurado (manejo autom√°tico)");
  }

  static Future<void> setupBLEDevice(BluetoothDevice device) async {
  print("üîµ Configurando dispositivo BLE espec√≠fico para iOS...");
  
  try {
    // ‚úÖ CONEXI√ìN con autoConnect habilitado
    await device.connect(
      autoConnect: true, // iOS manejar√° reconexi√≥n autom√°ticamente
      timeout: const Duration(seconds: 30),
    );
    
    // ‚úÖ CONFIGURAR listener permanente para estado de conexi√≥n
    device.connectionState.listen((state) {
      print("üîµ Estado BLE iOS: $state");
      
      if (state == BluetoothConnectionState.connected) {
        print("‚úÖ BLE conectado en iOS");
        BleData.update(connectionStatus: true);
        _setupBLENotifications(device); // Configurar notificaciones
      } else {
        print("‚ö†Ô∏è BLE desconectado en iOS - iOS intentar√° reconectar autom√°ticamente");
        BleData.update(connectionStatus: false);
      }
    });
    
    print("‚úÖ BLE iOS configurado con auto-reconnect");
    
  } catch (e) {
    print("‚ùå Error configurando BLE iOS: $e");
    throw e;
  }
}
  
  // ‚úÖ MOSTRAR NOTIFICACI√ìN DE ESTADO
static Future<void> showStatusNotification(String message) async {
  if (_localNotifications == null) return;
  
  try {
    // ‚úÖ CONFIGURACI√ìN M√ÅXIMA PROMINENCIA PARA BLE
    const DarwinNotificationDetails iosDetails = DarwinNotificationDetails(
      presentAlert: true,          // ‚úÖ Mostrar alerta
      presentBadge: true,          // ‚úÖ Mostrar badge
      presentSound: true,          // ‚úÖ Reproducir sonido
      sound: 'default',            // ‚úÖ Sonido por defecto del sistema
      interruptionLevel: InterruptionLevel.timeSensitive, // ‚úÖ CR√çTICO: Interrumpe DND
      categoryIdentifier: 'BLE_CONNECTION',
      threadIdentifier: 'ble_status',
    );
    
    const NotificationDetails details = NotificationDetails(iOS: iosDetails);
    
    await _localNotifications!.show(
      DateTime.now().millisecondsSinceEpoch ~/ 1000, // ID √∫nico
      "üîµ Estado BLE",
      message,
      details,
    );
    
    print("‚úÖ Notificaci√≥n prominente iOS mostrada: $message");
    
  } catch (e) {
    print("‚ùå Error mostrando notificaci√≥n prominente: $e");
  }
}

static Future<void> showCriticalBleNotification(String title, String message, {bool isDisconnection = false}) async {
  if (_localNotifications == null) {
    print("‚ùå Notificaciones locales no inicializadas para BLE cr√≠tica");
    await _setupLocalNotifications();
    if (_localNotifications == null) {
      print("‚ùå No se pudo inicializar notificaciones para BLE cr√≠tica");
      return;
    }
  }
  
  try {
    print("üîî === PREPARANDO NOTIFICACI√ìN BLE CR√çTICA ===");
    print("   T√≠tulo: $title");
    print("   Mensaje: $message");
    print("   Es desconexi√≥n: $isDisconnection");
    
    // ‚úÖ ID espec√≠fico para BLE cr√≠tico
    int notificationId = isDisconnection ? 888 : 777;
    
    print("üîî Enviando notificaci√≥n con ID: $notificationId");
    
    // ‚úÖ PROBAR M√öLTIPLES CONFIGURACIONES HASTA QUE UNA FUNCIONE
    List<DarwinNotificationDetails> configsToTry = [
      // Config 1: Cr√≠tica completa
      const DarwinNotificationDetails(
        presentAlert: true,
        presentBadge: true,
        presentSound: true,
        sound: 'default',
        interruptionLevel: InterruptionLevel.critical,
        categoryIdentifier: 'BLE_CRITICAL',
        threadIdentifier: 'ble_critical',
        subtitle: 'Sistema BLE SOS',
      ),
      // Config 2: Time-sensitive como respaldo
      const DarwinNotificationDetails(
        presentAlert: true,
        presentBadge: true,
        presentSound: true,
        sound: 'default',
        interruptionLevel: InterruptionLevel.timeSensitive,
        categoryIdentifier: 'BLE_IMPORTANT',
      ),
      // Config 3: Activa como √∫ltimo recurso
      const DarwinNotificationDetails(
        presentAlert: true,
        presentBadge: true,
        presentSound: true,
        sound: 'default',
        interruptionLevel: InterruptionLevel.active,
        categoryIdentifier: 'BLE_BASIC',
      ),
    ];
    
    bool notificationSent = false;
    
    for (int i = 0; i < configsToTry.length; i++) {
      try {
        print("üîÑ Intentando configuraci√≥n ${i + 1}/3...");
        
        await _localNotifications!.show(
          notificationId + i, // ID ligeramente diferente para cada intento
          title,
          message,
          NotificationDetails(iOS: configsToTry[i]),
        );
        
        print("‚úÖ Notificaci√≥n BLE enviada exitosamente con configuraci√≥n ${i + 1}");
        notificationSent = true;
        break; // Salir del loop si tiene √©xito
        
      } catch (e) {
        print("‚ùå Error con configuraci√≥n ${i + 1}: $e");
        if (i == configsToTry.length - 1) {
          print("‚ùå Todas las configuraciones fallaron");
        }
      }
    }
    
    if (notificationSent) {
      print("‚úÖ Notificaci√≥n BLE CR√çTICA enviada exitosamente");
    } else {
      print("‚ùå FALL√ì: No se pudo enviar notificaci√≥n BLE con ninguna configuraci√≥n");
    }
    
  } catch (e) {
    print("‚ùå Error cr√≠tico mostrando notificaci√≥n BLE: $e");
  }
}


static Future<void> playSosAudioBackground() async {
  try {
    print("üîä === REPRODUCIENDO AUDIO SOS EN BACKGROUND ===");
    
    // ‚úÖ M√âTODO 1: Usar audioplayers con MP3 (m√°s confiable para reproducci√≥n directa)
    try {
      final AudioPlayer audioPlayer = AudioPlayer();
      
      print("üîä Reproduciendo audio MP3 con audioplayers...");
      await audioPlayer.play(AssetSource("sounds/alerta_sos.mp3"));
      print("‚úÖ Audio SOS MP3 reproducido exitosamente");
      
      // Detener despu√©s de 3 segundos
      Timer(Duration(seconds: 3), () {
        audioPlayer.stop();
        audioPlayer.dispose();
        print("üîä Audio SOS finalizado y recursos liberados");
      });
      
    } catch (audioError) {
      print("‚ö†Ô∏è Error reproduciendo audio MP3: $audioError");
    }
    
    // ‚úÖ M√âTODO 2: Notificaci√≥n con sonido WAV personalizado
    if (_localNotifications != null) {
      print("üîî Enviando notificaci√≥n SOS con sonido WAV personalizado...");
      
      try {
        // ‚úÖ USAR WAV PARA NOTIFICACIONES (ahora que est√° en pubspec.yaml)
        const DarwinNotificationDetails iosDetails = DarwinNotificationDetails(
          presentAlert: true,
          presentBadge: true,
          presentSound: true,
          sound: 'alerta_sos.wav', // ‚úÖ AHORA S√ç USAR WAV para notificaciones
          interruptionLevel: InterruptionLevel.critical,
          categoryIdentifier: 'SOS_AUDIO',
          threadIdentifier: 'sos_sound',
          subtitle: 'üö® ALERTA SOS ACTIVADA',
        );
        
        const NotificationDetails details = NotificationDetails(iOS: iosDetails);
        
        await _localNotifications!.show(
          998,
          "üö® ALERTA SOS",
          "Bot√≥n de p√°nico activado - Enviando ubicaci√≥n y alerta",
          details,
        );
        
        print("‚úÖ Notificaci√≥n SOS con sonido WAV personalizado mostrada");
        
      } catch (notificationError) {
        print("‚ö†Ô∏è Error en notificaci√≥n SOS con WAV: $notificationError");
        
        // ‚úÖ FALLBACK: Usar sonido por defecto si WAV falla
        try {
          print("üîÑ Intentando con sonido por defecto...");
          const DarwinNotificationDetails fallbackDetails = DarwinNotificationDetails(
            presentAlert: true,
            presentBadge: true,
            presentSound: true,
            sound: 'default',
            interruptionLevel: InterruptionLevel.critical,
            categoryIdentifier: 'SOS_AUDIO_FALLBACK',
          );
          
          await _localNotifications!.show(
            997,
            "üö® ALERTA SOS",
            "Emergencia activada - Sistema de respaldo",
            const NotificationDetails(iOS: fallbackDetails),
          );
          
          print("‚úÖ Notificaci√≥n SOS con sonido por defecto (fallback) mostrada");
          
        } catch (fallbackError) {
          print("‚ùå Error incluso con fallback: $fallbackError");
        }
      }
    } else {
      print("‚ö†Ô∏è Notificaciones locales no disponibles para SOS");
    }
    
    print("üîä === FIN REPRODUCCI√ìN AUDIO SOS ===");
    
  } catch (e) {
    print("‚ùå Error general reproduciendo audio SOS: $e");
  }
}

static Future<bool> forceRequestNotificationPermissions() async {
  try {
    print("üîî === FORZANDO SOLICITUD DE PERMISOS ===");
    
    if (_localNotifications == null) {
      await _setupLocalNotifications();
    }
    
    final iosImpl = _localNotifications!
        .resolvePlatformSpecificImplementation<IOSFlutterLocalNotificationsPlugin>();
    
    if (iosImpl != null) {
      print("üì± Solicitando permisos expl√≠citamente...");
      
      // ‚úÖ SOLICITAR TODOS LOS PERMISOS POSIBLES
      final bool? result = await iosImpl.requestPermissions(
        alert: true,
        badge: true,
        sound: true,
        critical: true, // ‚úÖ CR√çTICO para emergencias
      );
      
      print("üì± Resultado de solicitud: $result");
      
      // ‚úÖ VERIFICAR USANDO permission_handler EN LUGAR DE checkPermissions()
      bool notificationPermission = await Permission.notification.isGranted;
      print("üì± Estado de permisos de notificaci√≥n: $notificationPermission");
      
      // ‚úÖ PROBAR NOTIFICACI√ìN INMEDIATAMENTE
      if (result == true || notificationPermission) {
        print("‚úÖ Permisos concedidos, probando notificaci√≥n...");
        
        try {
          await _localNotifications!.show(
            999,
            "üéâ PERMISOS CONCEDIDOS",
            "Las notificaciones est√°n funcionando correctamente",
            const NotificationDetails(
              iOS: DarwinNotificationDetails(
                presentAlert: true,
                presentBadge: true,
                presentSound: true,
                interruptionLevel: InterruptionLevel.critical,
              ),
            ),
          );
          print("‚úÖ Notificaci√≥n de prueba enviada");
          return true;
        } catch (e) {
          print("‚ö†Ô∏è Error enviando notificaci√≥n de prueba: $e");
          return false;
        }
      } else {
        print("‚ùå Permisos no concedidos");
        return false;
      }
      
    } else {
      print("‚ùå No se pudo obtener implementaci√≥n iOS");
      return false;
    }
    
  } catch (e) {
    print("‚ùå Error forzando solicitud de permisos: $e");
    return false;
  }
}


static Future<String> checkCurrentPermissionStatus() async {
  try {
    print("üîç === VERIFICANDO PERMISOS DETALLADAMENTE ===");
    
    // ‚úÖ M√âTODO REAL: Intentar mostrar notificaci√≥n y ver si funciona
    if (_localNotifications == null) {
      await _setupLocalNotifications();
    }
    
    final iosImpl = _localNotifications!
        .resolvePlatformSpecificImplementation<IOSFlutterLocalNotificationsPlugin>();
    
    if (iosImpl != null) {
      try {
        // ‚úÖ PROBAR NOTIFICACI√ìN CR√çTICA REAL
        print("üì± Probando notificaci√≥n cr√≠tica para verificar permisos...");
        
        await _localNotifications!.show(
          888, // ID de prueba espec√≠fico
          "üß™ Verificaci√≥n de Permisos",
          "Si ves esta notificaci√≥n, los permisos est√°n OK",
          const NotificationDetails(
            iOS: DarwinNotificationDetails(
              presentAlert: true,
              presentBadge: true,
              presentSound: true,
              interruptionLevel: InterruptionLevel.critical,
              categoryIdentifier: 'PERMISSION_TEST',
            ),
          ),
        );
        
        print("‚úÖ Notificaci√≥n de verificaci√≥n enviada sin errores");
        
        // ‚úÖ Si llegamos aqu√≠ sin excepci√≥n, los permisos est√°n OK
        return "Concedido (Verificado)";
        
      } catch (e) {
        print("‚ùå Error enviando notificaci√≥n de verificaci√≥n: $e");
        
        // ‚úÖ Si hay error, los permisos no est√°n bien configurados
        return "Denegado (Error: $e)";
      }
    } else {
      print("‚ùå No se pudo obtener implementaci√≥n iOS");
      return "Error (No iOS impl)";
    }
    
  } catch (e) {
    print("‚ùå Error general verificando permisos: $e");
    return "Error: $e";
  }
}

static Future<void> debugNotificationSettings() async {
  try {
    print("üîç === DEBUG DETALLADO DE NOTIFICACIONES ===");
    
    if (_localNotifications == null) {
      print("‚ùå _localNotifications es null");
      return;
    }
    
    final iosImpl = _localNotifications!
        .resolvePlatformSpecificImplementation<IOSFlutterLocalNotificationsPlugin>();
    
    if (iosImpl == null) {
      print("‚ùå iosImpl es null");
      return;
    }
    
    // ‚úÖ PROBAR DIFERENTES TIPOS DE NOTIFICACIONES
    print("üì± Probando notificaci√≥n b√°sica...");
    try {
      await _localNotifications!.show(
        777,
        "üîµ Prueba B√°sica",
        "Notificaci√≥n b√°sica de prueba",
        const NotificationDetails(
          iOS: DarwinNotificationDetails(
            presentAlert: true,
            presentSound: false,
            interruptionLevel: InterruptionLevel.passive,
          ),
        ),
      );
      print("‚úÖ Notificaci√≥n b√°sica enviada OK");
    } catch (e) {
      print("‚ùå Error notificaci√≥n b√°sica: $e");
    }
    
    await Future.delayed(Duration(seconds: 2));
    
    print("üì± Probando notificaci√≥n cr√≠tica...");
    try {
      await _localNotifications!.show(
        776,
        "üö® Prueba Cr√≠tica",
        "Notificaci√≥n cr√≠tica de prueba",
        const NotificationDetails(
          iOS: DarwinNotificationDetails(
            presentAlert: true,
            presentSound: true,
            interruptionLevel: InterruptionLevel.critical,
          ),
        ),
      );
      print("‚úÖ Notificaci√≥n cr√≠tica enviada OK");
    } catch (e) {
      print("‚ùå Error notificaci√≥n cr√≠tica: $e");
    }
    
    await Future.delayed(Duration(seconds: 2));
    
    print("üì± Probando notificaci√≥n time-sensitive...");
    try {
      await _localNotifications!.show(
        775,
        "‚è∞ Prueba Time-Sensitive",
        "Notificaci√≥n time-sensitive de prueba",
        const NotificationDetails(
          iOS: DarwinNotificationDetails(
            presentAlert: true,
            presentSound: true,
            interruptionLevel: InterruptionLevel.timeSensitive,
          ),
        ),
      );
      print("‚úÖ Notificaci√≥n time-sensitive enviada OK");
    } catch (e) {
      print("‚ùå Error notificaci√≥n time-sensitive: $e");
    }
    
    print("üîç === FIN DEBUG DETALLADO ===");
    
  } catch (e) {
    print("‚ùå Error en debug detallado: $e");
  }
}

  
  // ‚úÖ LIMPIAR RECURSOS
  static Future<void> dispose() async {
    print("üßπ Limpiando recursos iOS...");
    
    await _locationSubscription?.cancel();
    _locationSubscription = null;
    _isInitialized = false;
    
    print("‚úÖ Recursos iOS limpiados");
  }
  
  // ‚úÖ VERIFICAR SI EST√Å EJECUT√ÅNDOSE EN iOS
  static bool get isIOS => Platform.isIOS;
  
  // ‚úÖ OBTENER ESTADO DE UBICACI√ìN
  static bool get isLocationActive => _locationSubscription != null;
}

// ============================================================================
// ACTUALIZACI√ìN PARA pubspec.yaml
// ============================================================================

/*
‚úÖ AGREGAR AL pubspec.yaml:

dependencies:
  # ... dependencias existentes ...
  
  # ‚úÖ CR√çTICO: Para notificaciones locales iOS
  flutter_local_notifications: ^17.2.2
  
  # ‚úÖ VERIFICAR: Estas ya deber√≠an estar
  flutter_blue_plus: ^1.35.3
  geolocator: ^9.0.0
  url_launcher: ^6.1.14

*/