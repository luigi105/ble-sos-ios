import 'dart:async';
import 'package:flutter_blue_plus/flutter_blue_plus.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'dart:io';
import 'coms.dart'; 
import 'ios_platform_manager.dart';

class BleData {
  static String macAddress = "N/A";
  static String imei = "UNKNOWN_IMEI"; 
  static String sosNumber = "N/A";
  static int batteryLevel = 0;
  static int rssi = -100; 
  static bool isConnected = false;
  static String deviceId = "UNKNOWN_DEVICE_ID";
  static bool locationConfirmed = false;
  static int conBoton = 0; 
  static bool autoCall = false; 
  static bool sosSoundEnabled = true;
  static bool sosNotificationEnabled = true; // Por defecto activado
  static bool bleNotificationsEnabled = true; // Para notificaciones de conexi√≥n BLE
  static bool prevConnectionState = false;
  static int locationFailureCount = 0;
  static int maxFailuresBeforeNotification = 5; // Notificacion red, norificaciones en "x"
  static int reconnectionAttemptCount = 0;
  static int maxReconnectionAttemptsBeforeNotification = 7; // Notificacion BLE, norificaciones en "x"
  static bool bleDisconnectionNotificationShown = false;
  static bool locationDisconnectionNotificationShown = false;  
  static DateTime? lastBleDisconnectionNotification; 
  static const Duration minimumNotificationInterval = Duration(minutes: 5);
  static DateTime? lastFailureTime;
  static bool firstBleConnection = true;  // Para primera conexi√≥n Bluetooth
  static bool firstLocationConfirmation = true;  // Para primera confirmaci√≥n de ubicaci√≥n
  static bool connectionNotificationsEnabled = true;  

  static StreamSubscription<BluetoothConnectionState>? connectionSubscription;

  

  static Future<void> debugSharedPreferences() async {
  SharedPreferences prefs = await SharedPreferences.getInstance();
  
  print("üîç === DEBUG SHARED PREFERENCES ===");
  
  // Mostrar TODOS los valores guardados
  Set<String> keys = prefs.getKeys();
  print("üìã Claves encontradas en SharedPreferences:");
  
  if (keys.isEmpty) {
    print("   ‚úÖ SharedPreferences est√° VAC√çO (como deber√≠a estar en instalaci√≥n nueva)");
  } else {
    print("   ‚ùå SharedPreferences tiene ${keys.length} valores guardados:");
    for (String key in keys) {
      dynamic value = prefs.get(key);
      print("   - $key: $value");
    }
  }
  
  // Verificar valores espec√≠ficos que estamos cargando
  print("üîç Valores espec√≠ficos que estamos cargando:");
  print("   - conBoton: ${prefs.getInt('conBoton') ?? 'NO ENCONTRADO (deber√≠a ser null)'}");
  print("   - macAddress: ${prefs.getString('macAddress') ?? 'NO ENCONTRADO (deber√≠a ser null)'}");
  print("   - imei: ${prefs.getString('imei') ?? 'NO ENCONTRADO (deber√≠a ser null)'}");
  print("   - sosNumber: ${prefs.getString('sosNumber') ?? 'NO ENCONTRADO (deber√≠a ser null)'}");
  
  print("üîç === FIN DEBUG SHARED PREFERENCES ===");
}

static Future<void> forceCleanForDevelopment() async {
  SharedPreferences prefs = await SharedPreferences.getInstance();
  
  print("üóëÔ∏è === LIMPIEZA FORZADA PARA DESARROLLO ===");
  
  // Mostrar qu√© hay antes de limpiar
  Set<String> keysBefore = prefs.getKeys();
  print("üìã Antes de limpiar: ${keysBefore.length} claves");
  
  // Limpiar TODO
  bool cleared = await prefs.clear();
  print("üóëÔ∏è Resultado de clear(): $cleared");
  
  // Verificar despu√©s de limpiar
  Set<String> keysAfter = prefs.getKeys();
  print("üìã Despu√©s de limpiar: ${keysAfter.length} claves");
  
  // Resetear variables en memoria tambi√©n
  conBoton = 0;
  macAddress = "N/A";
  imei = "UNKNOWN_IMEI";
  sosNumber = "UNKNOWN_SOS";
  autoCall = false;
  sosNotificationEnabled = true;
  bleNotificationsEnabled = true;
  
  print("‚úÖ Variables en memoria tambi√©n reseteadas");
  print("üîç === FIN LIMPIEZA FORZADA ===");
}


static Future<void> checkFirstInstallAndCleanIfNeeded() async {
  SharedPreferences prefs = await SharedPreferences.getInstance();
  
  print("üîç === VERIFICACI√ìN DE INSTALACI√ìN ===");
  
  bool shouldClean = await shouldForceNewInstallation(prefs);
  
  if (shouldClean) {
    print("üóëÔ∏è Limpiando datos de instalaci√≥n nueva...");
    await performCleanInstallation(prefs);
  } else {
    print("‚úÖ Conservando datos de instalaci√≥n existente");
    await performNormalInstallationCheck(prefs);
  }
  
  print("üîç === FIN VERIFICACI√ìN ===");
}

// üÜï DETECTAR si debemos forzar nueva instalaci√≥n

static Future<bool> shouldForceNewInstallation(SharedPreferences prefs) async {
  
  // 1Ô∏è‚É£ Si no hay NING√öN dato, definitivamente es nueva
  Set<String> allKeys = prefs.getKeys();
  if (allKeys.isEmpty) {
    print("‚úÖ SharedPreferences vac√≠o = Nueva instalaci√≥n");
    return true;
  }
  
  // 2Ô∏è‚É£ ‚úÖ VERIFICAR MARKER DE INSTALACI√ìN ANTES DE CUALQUIER OTRA COSA
  bool hasInstallMarker = prefs.containsKey('app_install_timestamp');
  if (!hasInstallMarker) {
    print("üö® No hay marker de instalaci√≥n - Primera vez o restore");
    // ‚úÖ CREAR MARKER AHORA (no limpiar)
    int currentTime = DateTime.now().millisecondsSinceEpoch;
    await prefs.setInt('app_install_timestamp', currentTime);
    await prefs.setString('app_version_installed', "1.0.4");
    print("‚úÖ Marker de instalaci√≥n creado - NO limpiar datos existentes");
    return false; // ‚úÖ NO LIMPIAR - solo faltaba el marker
  }
  
  // 3Ô∏è‚É£ ‚úÖ SI HAY CONFIGURACI√ìN V√ÅLIDA, CONSERVARLA
  String? savedImei = prefs.getString('imei');
  int? conBoton = prefs.getInt('conBoton');
  
  bool hasValidConfig = (savedImei != null && savedImei != "UNKNOWN_IMEI" && conBoton != null && conBoton != 0);
  
  if (hasValidConfig) {
    print("‚úÖ Configuraci√≥n v√°lida encontrada - CONSERVAR datos");
    print("   - IMEI: $savedImei");
    print("   - conBoton: $conBoton");
    
    // ‚úÖ ACTUALIZAR timestamp de uso
    int currentTime = DateTime.now().millisecondsSinceEpoch;
    await prefs.setInt('app_last_usage_timestamp', currentTime);
    
    return false; // ‚úÖ NO LIMPIAR
  }
  
  // 4Ô∏è‚É£ ‚úÖ SOLO LIMPIAR si datos est√°n corruptos O incompletos
  if (savedImei == null || savedImei == "UNKNOWN_IMEI") {
    print("‚ö†Ô∏è IMEI no configurado - Nueva instalaci√≥n requerida");
    return true;
  }
  
  if (conBoton == null || conBoton == 0) {
    print("‚ö†Ô∏è conBoton no configurado - Nueva instalaci√≥n requerida");
    return true;
  }
  
  // 5Ô∏è‚É£ ‚úÖ DEFAULT: CONSERVAR datos
  print("‚úÖ Instalaci√≥n leg√≠tima - conservando todos los datos");
  return false;
}

// üßπ REALIZAR limpieza de nueva instalaci√≥n
static Future<void> performCleanInstallation(SharedPreferences prefs) async {
  // Limpiar todo
  Set<String> keysBefore = prefs.getKeys();
  print("üìã Limpiando ${keysBefore.length} claves de posible cloud restore");
  
  await prefs.clear();
  _resetAllVariablesToDefault();
  
  // Establecer markers de nueva instalaci√≥n
  String currentAppVersion = "1.0.4";
  int currentTime = DateTime.now().millisecondsSinceEpoch;
  
  await prefs.setString('app_version_installed', currentAppVersion);
  await prefs.setInt('app_install_timestamp', currentTime);
  await prefs.setInt('app_last_usage_timestamp', currentTime);
  
  print("‚úÖ Nueva instalaci√≥n configurada correctamente");
}

// üìã VERIFICACI√ìN normal para instalaciones existentes
static Future<void> performNormalInstallationCheck(SharedPreferences prefs) async {
  String currentAppVersion = "1.0.4";
  String? savedVersion = prefs.getString('app_version_installed');
  
  // Actualizar timestamp de uso
  int currentTime = DateTime.now().millisecondsSinceEpoch;
  await prefs.setInt('app_last_usage_timestamp', currentTime);
  
  // Verificar si es actualizaci√≥n de versi√≥n
  if (savedVersion != currentAppVersion) {
    print("üîÑ Actualizaci√≥n detectada: $savedVersion ‚Üí $currentAppVersion");
    await prefs.setString('app_version_installed', currentAppVersion);
  }
  
  print("‚úÖ Instalaci√≥n existente v√°lida - Datos conservados");
}

// M√©todo auxiliar para resetear todas las variables
static void _resetAllVariablesToDefault() {
  print("üîÑ Reseteando todas las variables a valores por defecto...");
  
  // Variables principales
  conBoton = 0;
  macAddress = "N/A";
  imei = "UNKNOWN_IMEI";
  sosNumber = "UNKNOWN_SOS";
  deviceId = "UNKNOWN_DEVICE_ID";
  
  // Variables de configuraci√≥n
  autoCall = false;
  sosSoundEnabled = true;
  sosNotificationEnabled = true;
  bleNotificationsEnabled = true;
  connectionNotificationsEnabled = true;
  
  // Variables de estado
  isConnected = false;
  locationConfirmed = false;
  batteryLevel = 0;
  rssi = -100;
  
  // Flags y contadores
  bleDisconnectionNotificationShown = false;
  locationDisconnectionNotificationShown = false;
  firstBleConnection = true;
  firstLocationConfirmation = true;
  locationFailureCount = 0;
  reconnectionAttemptCount = 0;
  
  // Timestamps
  lastBleDisconnectionNotification = null;
  lastFailureTime = null;
  
  print("‚úÖ Todas las variables reseteadas a valores por defecto");
}

// M√©todo nuclear para casos extremos de Samsung Cloud
static Future<void> nukePersistentDataForSamsung() async {
  SharedPreferences prefs = await SharedPreferences.getInstance();
  
  print("üí£ === ELIMINACI√ìN NUCLEAR PARA SAMSUNG ===");
  
  // Lista COMPLETA de todas las claves que podr√≠a usar tu app
  List<String> allPossibleKeys = [
    'conBoton',
    'macAddress', 
    'imei',
    'sosNumber',
    'autoCall',
    'sosNotificationEnabled',
    'bleNotificationsEnabled',
    'connectionNotificationsEnabled',
    'lastConnectionState',
    'lastRssi',
    'lastBatteryLevel',
    'app_version_installed',
    'app_install_timestamp',
    'app_last_check_timestamp',
    // Agregar cualquier otra clave que puedas haber usado
  ];
  
  // Eliminar cada clave individualmente
  for (String key in allPossibleKeys) {
    bool removed = await prefs.remove(key);
    print("üóëÔ∏è Eliminando $key: $removed");
  }
  
  // Clear general por si acaso
  bool cleared = await prefs.clear();
  print("üóëÔ∏è Clear general: $cleared");
  
  // Verificar resultado
  Set<String> remainingKeys = prefs.getKeys();
  print("üìã Claves restantes: ${remainingKeys.length}");
  
  if (remainingKeys.isNotEmpty) {
    print("‚ö†Ô∏è CLAVES PERSISTENTES DE SAMSUNG CLOUD:");
    for (String key in remainingKeys) {
      dynamic value = prefs.get(key);
      print("   - $key: $value");
      // Intentar eliminar individualmente
      await prefs.remove(key);
    }
  }
  
  // Resetear variables en memoria
  _resetAllVariablesToDefault();
  
  print("üí£ === FIN ELIMINACI√ìN NUCLEAR ===");
}




static void update({
  String? newMacAddress,
  int? newBatteryLevel,
  int? newRssi,
  bool? connectionStatus,
}) {
  // Guardar el estado anterior para detectar cambios
  prevConnectionState = isConnected;
  
  if (newMacAddress != null) macAddress = newMacAddress;
  if (newBatteryLevel != null) batteryLevel = newBatteryLevel;
  if (newRssi != null) rssi = newRssi;
  if (connectionStatus != null) {
    // Verificar si ha cambiado el estado de conexi√≥n
    bool stateChanged = isConnected != connectionStatus;
    isConnected = connectionStatus;
    
  if (stateChanged) {
        print("üîÑ Cambio de estado BLE: $prevConnectionState -> $isConnected");
        
        if (isConnected) {
          // ‚úÖ COMENTAR notificaci√≥n de conexi√≥n
          reconnectionAttemptCount = 0;
          print("‚úÖ BLE conectado - contador reiniciado");
          
          /*
          // ‚úÖ COMENTADO: Notificaci√≥n de conexi√≥n no necesaria
          if (firstBleConnection && connectionNotificationsEnabled && conBoton == 1) {
            // CommunicationService().showBleConnectedNotification();
            firstBleConnection = false;
          }
          else if (connectionNotificationsEnabled && conBoton == 1 && bleDisconnectionNotificationShown) {
            // CommunicationService().showBleConnectedNotification();
            bleDisconnectionNotificationShown = false;
          }
          */
          
        } else {
          // ‚úÖ MANTENER: Solo notificaci√≥n de desconexi√≥n
          print("‚ùå BLE desconectado");
          if (connectionNotificationsEnabled && conBoton == 1 && bleNotificationsEnabled) {
            print("üîî Enviando notificaci√≥n de desconexi√≥n...");
            CommunicationService().showBleDisconnectedNotification();
            bleDisconnectionNotificationShown = true;
            markDisconnectionNotificationShown();
          }
        }
      }

    // ‚úÖ NOTIFICACIONES ESPEC√çFICAS iOS (c√≥digo existente)
    if (Platform.isIOS && connectionStatus != null) {
      bool stateChanged = isConnected != connectionStatus;
      isConnected = connectionStatus;
      
      if (stateChanged) {
        if (isConnected) {
          IOSPlatformManager.showStatusNotification("üîµ Dispositivo BLE conectado");
        } else {
          IOSPlatformManager.showStatusNotification("‚ö†Ô∏è Dispositivo BLE desconectado - iOS intentar√° reconectar");
        }
      }
    }
    
    // Guardar estado de conexi√≥n cuando cambia
    saveConnectionState(connectionStatus);
  }

  print("Datos BLE actualizados:");
  print("MAC Address: $macAddress");
  print("Battery Level: $batteryLevel%");
  print("RSSI: $rssi dBm");
  print("Conexi√≥n Activa: $isConnected");
}

  
static void setLocationConfirmed(bool status) {

    // ‚úÖ MANEJO ESPEC√çFICO iOS
  if (Platform.isIOS) {
    bool previousState = locationConfirmed;
    locationConfirmed = status;
    
    if (status && !previousState) {
      IOSPlatformManager.showStatusNotification("üìç Ubicaci√≥n confirmada - Cambios significativos monitoreados");
    } else if (!status && previousState) {
      IOSPlatformManager.showStatusNotification("‚ö†Ô∏è Error enviando ubicaci√≥n");
    }
    
    return; // Salir temprano para iOS
  }

  // Agregar protecci√≥n contra cambios r√°pidos de estado
  if (!status) {
    // Si estamos marcando como fallo, registrar el tiempo
    lastFailureTime = DateTime.now();
  } else if (lastFailureTime != null) {
    // Si estamos marcando como √©xito despu√©s de un fallo reciente
    Duration timeSinceFailure = DateTime.now().difference(lastFailureTime!);
    if (timeSinceFailure < Duration(seconds: 5)) {
      print("‚ö†Ô∏è Intento de marcar como √©xito demasiado pronto despu√©s de un fallo (${timeSinceFailure.inSeconds}s). Ignorando.");
      return; // Ignorar este intento de marcar como √©xito
    }
  }
  
  // Guardar el estado anterior
  bool previousState = locationConfirmed;
  
  // Manejar el caso de √©xito
  if (status) {
    bool stateChanged = previousState != status;
    
    if (stateChanged) {
      print("üîÑ Cambio de estado de confirmaci√≥n: $previousState -> $status");
      locationConfirmed = status;
      
      // Si la comunicaci√≥n se recupera, reiniciamos el contador
      locationFailureCount = 0;
      print("Confirmaci√≥n de ubicaci√≥n: EXITOSA ‚úÖ | Contador de fallos reiniciado: 0");
    }
    
    // Caso especial: Primera confirmaci√≥n de ubicaci√≥n despu√©s de iniciar la app
    if (firstLocationConfirmation && connectionNotificationsEnabled) {
      print("üîî Primera confirmaci√≥n de ubicaci√≥n detectada. Mostrando notificaci√≥n inicial.");
      CommunicationService().showLocationStatusNotification(true);
      firstLocationConfirmation = false;  // Marcar que ya se mostr√≥ la primera notificaci√≥n
    } 
    // Caso normal: Reconexi√≥n despu√©s de una notificaci√≥n de desconexi√≥n
    else if (stateChanged && previousState == false && locationDisconnectionNotificationShown && connectionNotificationsEnabled) {
      print("‚úÖ Conexi√≥n recuperada: Mostrando notificaci√≥n de √©xito (despu√©s de notificaci√≥n de fallo)");
      CommunicationService().showLocationStatusNotification(true);
      // Reiniciar la bandera despu√©s de mostrar la notificaci√≥n
      locationDisconnectionNotificationShown = false;
    } 
    else if (stateChanged) {
      print("‚úÖ Conexi√≥n recuperada: No se muestra notificaci√≥n porque no se alcanz√≥ el umbral de fallos previamente");
    }
  } 
  // Manejar el caso de fallo - aunque no haya cambio de estado
  else if (!status) {
    // Establecer el estado si es necesario
    if (previousState != status) {
      locationConfirmed = status;
      print("üîÑ Cambio de estado de confirmaci√≥n: $previousState -> $status");
    } else {
      print("üìå Estado de confirmaci√≥n sin cambios (sigue en: $status)");
    }
    
    // Primera confirmaci√≥n fallida no deber√≠a mostrar notificaci√≥n
    if (firstLocationConfirmation) {
      firstLocationConfirmation = false;
      print("üìå Primera confirmaci√≥n fall√≥, pero no se muestra notificaci√≥n por ser la primera");
      locationFailureCount = 0; // Reiniciamos para que comience el conteo apropiadamente
    } else {
      // Siempre incrementar el contador cuando se marque como fallido (despu√©s de la primera vez)
      locationFailureCount++;
      print("Confirmaci√≥n de ubicaci√≥n: FALLIDA ‚ùå | Contador de fallos: $locationFailureCount/$maxFailuresBeforeNotification");
      
      // Solo mostrar la notificaci√≥n de FALLO cuando alcanzamos exactamente el umbral,
      // independientemente de si hubo cambio de estado o no
      if (locationFailureCount == maxFailuresBeforeNotification) {
        print("‚ùå Umbral de fallos alcanzado: Mostrando notificaci√≥n de fallo");
        
        // Solo mostrar notificaci√≥n si est√°n habilitadas
        if (connectionNotificationsEnabled) {
          CommunicationService().showLocationStatusNotification(false);
          locationDisconnectionNotificationShown = true;  // Marcar que se mostr√≥ la notificaci√≥n
        }
      }
    }
  }
}
  
  // M√©todo para actualizar el deviceId
  static void setDeviceId(String newDeviceId) {
    deviceId = newDeviceId;
    print("ID √∫nico del dispositivo actualizado: $deviceId");
  }

  // Guardar y cargar la configuraci√≥n de conBoton
  static Future<void> setConBoton(int value) async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    await prefs.setInt('conBoton', value);
    conBoton = value;
    print("conBoton actualizado: $conBoton");
  }

  static Future<void> loadConBoton() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    conBoton = prefs.getInt('conBoton') ?? 0;
    print("conBoton cargado: $conBoton");
  }

  // Guardar y cargar el MacAddress
  static Future<void> setMacAddress(String value) async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    await prefs.setString('macAddress', value);
    macAddress = value;
    print("MacAddress actualizado: $macAddress");
  }

  static Future<void> loadMacAddress() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    macAddress = prefs.getString('macAddress') ?? "N/A";
    print("MacAddress cargado: $macAddress");
  }

  static Future<void> clearMacAddress() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    await prefs.remove('macAddress');
    macAddress = "N/A";
    print("üóëÔ∏è MacAddress eliminado");
  }

  static Future<void> setImei(String newImei) async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    await prefs.setString('imei', newImei);
    imei = newImei;
    print("IMEI guardado: $imei");
  }

  static Future<void> loadImei() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    imei = prefs.getString('imei') ?? "UNKNOWN_IMEI";
    print("IMEI cargado: $imei");
  }

  static Future<void> setSosNumber(String newNumber) async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    await prefs.setString('sosNumber', newNumber);
    sosNumber = newNumber;
    print("üìå N√∫mero SOS guardado: $sosNumber");
  }

  static Future<void> loadSosNumber() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    sosNumber = prefs.getString('sosNumber') ?? "UNKNOWN_SOS";
    print("üìå N√∫mero SOS cargado: $sosNumber");
  }

  static void restartApp() {
    exit(0);
  }

  // Guardar y cargar la configuraci√≥n de Llamado Autom√°tico
  static Future<void> setAutoCall(bool value) async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    await prefs.setBool('autoCall', value);
    autoCall = value;
    print("üìû Llamado Autom√°tico actualizado: $autoCall");
  }

  static Future<void> loadAutoCall() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    autoCall = prefs.getBool('autoCall') ?? false;
    print("üìû Llamado Autom√°tico cargado: $autoCall");
  }

  static Future<void> setSosSoundEnabled(bool value) async {
    sosSoundEnabled = value;
    // Guarda la preferencia en almacenamiento local (si usas SharedPreferences, agr√©galo aqu√≠)
  }

  // A√±ade un m√©todo para cancelar la suscripci√≥n al estado de conexi√≥n
  static void cancelConnectionSubscription() {
    connectionSubscription?.cancel();
    connectionSubscription = null;
  }
  
  // Para limpiar recursos cuando la app se cierra
  // Modificar el m√©todo dispose en ble_data.dart:

// Para limpiar recursos cuando la app se cierra
static void dispose() {
  print("üßπ Limpiando recursos de BleData...");
  
  // Cancelar suscripci√≥n de conexi√≥n BLE
  cancelConnectionSubscription();
  
  // Resetear banderas de estado
  bleDisconnectionNotificationShown = false;
  locationDisconnectionNotificationShown = false;
  firstBleConnection = true;
  firstLocationConfirmation = true;
  
  // Resetear contadores
  locationFailureCount = 0;
  reconnectionAttemptCount = 0;
  
  // Limpiar timestamps
  lastBleDisconnectionNotification = null;
  lastFailureTime = null;
  
  print("‚úÖ Recursos de BleData limpiados");
}

  // M√©todo para guardar el √∫ltimo estado de conexi√≥n
  static Future<void> saveConnectionState(bool isConnected) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setBool('lastConnectionState', isConnected);
  }
  
  // M√©todo para cargar el √∫ltimo estado de conexi√≥n conocido
  static Future<bool> loadLastConnectionState() async {
    final prefs = await SharedPreferences.getInstance();
    return prefs.getBool('lastConnectionState') ?? false;
  }
  
  // M√©todo para guardar el √∫ltimo rssi conocido
  static Future<void> saveLastRssi(int rssi) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setInt('lastRssi', rssi);
  }
  
  // M√©todo para cargar el √∫ltimo rssi conocido
  static Future<int> loadLastRssi() async {
    final prefs = await SharedPreferences.getInstance();
    return prefs.getInt('lastRssi') ?? 0;
  }
  
  // M√©todo para guardar el √∫ltimo nivel de bater√≠a conocido
  static Future<void> saveLastBatteryLevel(int level) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setInt('lastBatteryLevel', level);
  }
  
  // M√©todo para cargar el √∫ltimo nivel de bater√≠a conocido
  static Future<int> loadLastBatteryLevel() async {
    final prefs = await SharedPreferences.getInstance();
    return prefs.getInt('lastBatteryLevel') ?? 0;
  }
  
  // Carga todos los datos guardados al iniciar la app
  static Future<void> loadAllSavedData() async {
    await loadConBoton();
    await loadMacAddress();
    await loadImei();
    await loadSosNumber();
    await loadAutoCall();
    await loadSosNotificationEnabled();
    await loadBleNotificationsEnabled(); // Cargar configuraci√≥n de notificaciones BLE
    
    // Cargar √∫ltimo estado de conexi√≥n conocido
    int lastRssi = await loadLastRssi();
    int lastBatteryLevel = await loadLastBatteryLevel();
    
    // Actualizar los datos con la informaci√≥n guardada
    BleData.update(
      newRssi: lastRssi,
      newBatteryLevel: lastBatteryLevel,
      connectionStatus: false // Iniciamos desconectado aunque el √∫ltimo estado fuera conectado
    );
  }

  // M√©todo para guardar la configuraci√≥n de notificaciones SOS
  static Future<void> setSosNotificationEnabled(bool value) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setBool('sosNotificationEnabled', value);
    sosNotificationEnabled = value;
    print("üì± Notificaciones SOS: $sosNotificationEnabled");
  }

  // M√©todo para cargar la configuraci√≥n de notificaciones SOS
  static Future<void> loadSosNotificationEnabled() async {
    final prefs = await SharedPreferences.getInstance();
    sosNotificationEnabled = prefs.getBool('sosNotificationEnabled') ?? true; // Por defecto true
    print("üì± Notificaciones SOS cargadas: $sosNotificationEnabled");
  }
  
  // M√©todo para guardar la configuraci√≥n de notificaciones BLE
  static Future<void> setBleNotificationsEnabled(bool value) async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    await prefs.setBool('bleNotificationsEnabled', value);
    bleNotificationsEnabled = value;
    print("üì± Notificaciones BLE: $bleNotificationsEnabled");
  }

  // M√©todo para cargar la configuraci√≥n de notificaciones BLE
  static Future<void> loadBleNotificationsEnabled() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    bleNotificationsEnabled = prefs.getBool('bleNotificationsEnabled') ?? true; // Por defecto true
    print("üì± Notificaciones BLE cargadas: $bleNotificationsEnabled");
  }

  // Verificar si se debe mostrar notificaci√≥n de desconexi√≥n
  static bool shouldShowDisconnectionNotification() {
    // Si nunca se ha mostrado una notificaci√≥n, permitir mostrarla
    if (lastBleDisconnectionNotification == null) {
      return true;
    }
    
    // Solo permitir mostrar una notificaci√≥n si ha pasado el intervalo m√≠nimo
    DateTime now = DateTime.now();
    return now.difference(lastBleDisconnectionNotification!) > minimumNotificationInterval;
  }

  // Marcar que se ha mostrado una notificaci√≥n de desconexi√≥n
  static void markDisconnectionNotificationShown() {
    lastBleDisconnectionNotification = DateTime.now();
    bleDisconnectionNotificationShown = true;  // Configurar la bandera para reconexi√≥n
    print("üì± Notificaci√≥n de desconexi√≥n BLE mostrada y marcada a las ${lastBleDisconnectionNotification!.hour}:${lastBleDisconnectionNotification!.minute}");
  }


  // M√©todo para forzar un cambio de estado sin esperar a que falle m√∫ltiples veces
static void forceLocationDisconnected() {
  if (locationConfirmed) {
    print("‚ö†Ô∏è Forzando cambio de estado a desconectado");
    locationConfirmed = false;
    locationFailureCount = maxFailuresBeforeNotification; // Forzar para que se muestre la notificaci√≥n
    
    // Solo mostrar notificaci√≥n si est√°n habilitadas
    if (bleNotificationsEnabled) {
      print("üì± Mostrando notificaci√≥n de desconexi√≥n forzada");
      CommunicationService().showLocationStatusNotification(false);
      locationDisconnectionNotificationShown = true;
    }
  }
}

static Future<bool> isInternetConnected() async {
  try {
    final result = await InternetAddress.lookup('mmofusion.com');
    if (result.isNotEmpty && result[0].rawAddress.isNotEmpty) {
      return true;
    }
  } catch (_) {}
  return false;
}

static Future<void> setConnectionNotificationsEnabled(bool value) async {
  SharedPreferences prefs = await SharedPreferences.getInstance();
  await prefs.setBool('connectionNotificationsEnabled', value);
  connectionNotificationsEnabled = value;
  print("üì± Notificaciones de Conexi√≥n: $connectionNotificationsEnabled");
}

static Future<void> loadConnectionNotificationsEnabled() async {
  SharedPreferences prefs = await SharedPreferences.getInstance();
  connectionNotificationsEnabled = prefs.getBool('connectionNotificationsEnabled') ?? true; // Por defecto true
  print("üì± Notificaciones de Conexi√≥n cargadas: $connectionNotificationsEnabled");
}


Future<void> showBleDisconnectedNotification() async {
  // Verificar si las notificaciones de conexi√≥n est√°n habilitadas
  if (!BleData.connectionNotificationsEnabled) {
    print("üîï Notificaciones de conexi√≥n desactivadas, no se muestra notificaci√≥n");
    return;
  }
  
  try {
    // El resto del m√©todo sigue igual...
  } catch (e) {
    print("‚ùå Error al mostrar notificaci√≥n de desconexi√≥n BLE: $e");
  }
}

}