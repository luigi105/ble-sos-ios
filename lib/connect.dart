import 'package:flutter_blue_plus/flutter_blue_plus.dart';
import 'package:flutter/material.dart';
import 'coms.dart';
import 'dart:async';
import 'ble_data.dart';
import 'dart:io';

bool buttonPressed = false;
Timer? panicTimer;

// ‚úÖ A√ëADIR esta variable global para capturar errores BLE
String _lastBleError = "Ninguno";

// ‚úÖ FUNCI√ìN para obtener el √∫ltimo error (puede ser llamada desde main.dart)
String getLastBleError() => _lastBleError;
Function? _updateSosDebug;

void setSosDebugCallback(Function callback) {
  _updateSosDebug = callback;
}

// ‚úÖ REEMPLAZAR connectToDevice con versi√≥n h√≠brida iOS/Android
void connectToDevice(BluetoothDevice device, BuildContext context, Function discoverServicesCallback, Function triggerUpdateTimerCallback, Function onSosActivated) async {
  try {
    print("üîó Intento de conexi√≥n con: ${device.remoteId}");

    if (Platform.isIOS) {
      print("üçé === CONEXI√ìN BLE iOS H√çBRIDA ===");
      _lastBleError = "Iniciando conexi√≥n iOS";
      
      // ‚úÖ VERIFICAR estado actual de conexi√≥n primero
      BluetoothConnectionState state = await device.connectionState.first;
      if (state == BluetoothConnectionState.connected) {
        print("‚úÖ iOS: Dispositivo ya conectado");
        _lastBleError = "Ya conectado iOS";
        BleData.update(
          newMacAddress: device.remoteId.toString(),
          connectionStatus: true,
        );
        discoverServicesCallback(device, context, onSosActivated);
        triggerUpdateTimerCallback();
        return;
      }
      
      // ‚úÖ DETENER escaneo antes de conectar (cr√≠tico para iOS)
      try {
        await FlutterBluePlus.stopScan();
        await Future.delayed(Duration(milliseconds: 500)); // Pausa para iOS
        print("üçé iOS: Escaneo detenido antes de conectar");
      } catch (e) {
        print("‚ö†Ô∏è iOS: Advertencia al detener escaneo: $e");
      }
      
      // ‚úÖ CANCELAR conexiones anteriores
      BleData.cancelConnectionSubscription();
      
      try {
        // ‚úÖ CONEXI√ìN OPTIMIZADA PARA iOS
        await device.connect(
          autoConnect: true,  // ‚úÖ CR√çTICO para iOS - permite reconexi√≥n autom√°tica
          timeout: const Duration(seconds: 30),
        );
        
        _lastBleError = "Conexi√≥n inicial iOS exitosa";
        print("‚úÖ iOS: Conexi√≥n inicial exitosa");
        
        // ‚úÖ VERIFICAR estado despu√©s de conectar
        BluetoothConnectionState currentState = await device.connectionState.first;
        print("üîç iOS: Estado post-conexi√≥n: $currentState");
        
        if (currentState == BluetoothConnectionState.connected) {
          BleData.update(
            newMacAddress: device.remoteId.toString(),
            connectionStatus: true,
          );
          
          // ‚úÖ PEQUE√ëA PAUSA antes de descubrir servicios (iOS necesita tiempo)
          await Future.delayed(Duration(seconds: 1));
          discoverServicesCallback(device, context, onSosActivated);
          triggerUpdateTimerCallback();
        }
        
      } catch (e) {
        _lastBleError = "Error conexi√≥n inicial iOS: $e";
        print("‚ùå iOS: Error conexi√≥n inicial: $e");
        
        // ‚úÖ SEGUNDO INTENTO sin autoConnect
        try {
          await Future.delayed(Duration(seconds: 2));
          await device.connect(
            autoConnect: false,  // Sin autoConnect en segundo intento
            timeout: const Duration(seconds: 20),
          );
          _lastBleError = "Reconexi√≥n iOS exitosa";
          print("‚úÖ iOS: Reconexi√≥n exitosa");
        } catch (retryError) {
          _lastBleError = "Fall√≥ reconexi√≥n iOS: $retryError";
          print("‚ùå iOS: Fall√≥ reconexi√≥n: $retryError");
          return; // Salir si ambos intentos fallan
        }
      }
      
      // ‚úÖ CONFIGURAR LISTENER de estado permanente para iOS
      StreamSubscription<BluetoothConnectionState> connectionStateSubscription;
      connectionStateSubscription = device.connectionState.listen((newState) {
        print("üîµ iOS Estado cambi√≥: $newState");
        
        if (newState == BluetoothConnectionState.connected) {
          _lastBleError = "Conectado y operativo iOS";
          BleData.update(
            newMacAddress: device.remoteId.toString(),
            connectionStatus: true,
          );
          BleData.saveConnectionState(true);
          print("‚úÖ iOS: Conexi√≥n confirmada y guardada");
          
        } else if (newState == BluetoothConnectionState.disconnected) {
          _lastBleError = "Desconectado iOS - autoConnect activo";
          print("‚ö†Ô∏è iOS: Dispositivo desconectado - iOS intentar√° reconectar autom√°ticamente");
          BleData.update(
            newMacAddress: device.remoteId.toString(),
            connectionStatus: false,
          );
          BleData.saveConnectionState(false);
          
          // ‚úÖ iOS con autoConnect=true deber√≠a reconectar autom√°ticamente
          // No forzar reconexi√≥n manual - dejar que iOS lo maneje
          print("üçé iOS: Esperando reconexi√≥n autom√°tica por autoConnect...");
        }
      });
      
      // ‚úÖ ALMACENAR suscripci√≥n para limpieza posterior
      BleData.connectionSubscription = connectionStateSubscription;
      
    } else {
      // ‚úÖ ANDROID: Usar l√≥gica original que ya funciona
      print("ü§ñ === CONEXI√ìN BLE ANDROID (Original) ===");
      _lastBleError = "Iniciando conexi√≥n Android";
      
      // Verificar el estado actual de conexi√≥n
      BluetoothConnectionState state = await device.connectionState.first;

      // Si ya est√° conectado, no hacer nada m√°s
      if (state == BluetoothConnectionState.connected) {
        print("‚úÖ Android: Dispositivo ya conectado: ${device.remoteId}");
        _lastBleError = "Ya conectado Android";
        BleData.update(
          newMacAddress: device.remoteId.toString(),
          connectionStatus: true,
        );
        discoverServicesCallback(device, context, onSosActivated);
        triggerUpdateTimerCallback();
        return;
      }

      // Detener cualquier escaneo activo
      try {
        await FlutterBluePlus.stopScan();
        print("ü§ñ Android: Escaneo detenido para iniciar conexi√≥n.");
      } catch (e) {
        print("‚ö†Ô∏è Android: Advertencia al detener escaneo: $e");
      }

      // Cancelar cualquier suscripci√≥n anterior para evitar fugas de memoria
      BleData.cancelConnectionSubscription();

      // Intentar conectar con el dispositivo
      try {
        await device.connect(
          timeout: const Duration(seconds: 15),
          // Sin autoConnect para Android (como en versi√≥n original)
        );
        _lastBleError = "Conexi√≥n Android exitosa";
        print("‚úÖ Android: Conexi√≥n inicial exitosa");
      } catch (e) {
        _lastBleError = "Error conexi√≥n Android: $e";
        print("‚ùå Android: Error en conexi√≥n inicial: $e");
        // Intentar nuevamente sin autoConnect
        try {
          await device.connect(timeout: const Duration(seconds: 30));
          _lastBleError = "Reconexi√≥n Android exitosa";
        } catch (secondError) {
          _lastBleError = "Fall√≥ reconexi√≥n Android: $secondError";
          print("‚ùå Android: Error en segundo intento de conexi√≥n: $secondError");
          return; // Si falla dos veces, salir
        }
      }

      // Configurar listener permanente para el estado de conexi√≥n (Android)
      StreamSubscription<BluetoothConnectionState> connectionStateSubscription;
      connectionStateSubscription = device.connectionState.listen((newState) {
        print("ü§ñ Android: Estado del dispositivo ${device.remoteId}: $newState");
        
        if (newState == BluetoothConnectionState.connected) {
          _lastBleError = "Conectado y operativo Android";
          print("‚úÖ Android: Conexi√≥n exitosa: ${device.remoteId}");
          BleData.update(
            newMacAddress: device.remoteId.toString(),
            connectionStatus: true,
          );
          BleData.saveConnectionState(true);
          
          // Descubrir servicios y configurar notificaciones
          discoverServicesCallback(device, context, onSosActivated);
          
          // Iniciar actualizaci√≥n peri√≥dica de datos
          triggerUpdateTimerCallback();
        } 
        else if (newState == BluetoothConnectionState.disconnected) {
          _lastBleError = "Desconectado Android - programando reconexi√≥n";
          print("‚ùå Android: Dispositivo desconectado: ${device.remoteId}");
          BleData.update(
            newMacAddress: device.remoteId.toString(),
            connectionStatus: false,
          );
          BleData.saveConnectionState(false);
          
          // Intentar reconectar autom√°ticamente despu√©s de una desconexi√≥n (Android)
          Future.delayed(const Duration(seconds: 8), () {
            if (!BleData.isConnected) {
              print("üîÑ Android: Intentando reconexi√≥n autom√°tica despu√©s de desconexi√≥n...");
              try {
                device.connect(timeout: const Duration(seconds: 30)).catchError((e) {
                  _lastBleError = "Error reconexi√≥n autom√°tica Android: $e";
                  print("‚ùå Android: Error en reconexi√≥n autom√°tica: $e");
                });
              } catch (e) {
                _lastBleError = "Excepci√≥n reconexi√≥n Android: $e";
                print("‚ùå Android: Excepci√≥n en reconexi√≥n autom√°tica: $e");
              }
            }
          });
        }
      });
      
      // Almacenar la suscripci√≥n para poder cancelarla cuando sea necesario
      BleData.connectionSubscription = connectionStateSubscription;
    }
    
  } catch (e) {
    _lastBleError = "Error general: $e";
    print("‚ùå Error general al intentar conectar con el dispositivo: $e");

    // Verificar si el error es el c√≥digo 133 (ANDROID_SPECIFIC_ERROR)
    if (e.toString().contains("133") && Platform.isAndroid) {
      promptToToggleBluetooth();
    }
  }
}

// Mostrar mensaje al usuario para que reinicie manualmente el Bluetooth
void promptToToggleBluetooth() {
  print("No se puede desactivar Bluetooth autom√°ticamente. Solicita al usuario que lo reinicie manualmente.");
  // Puedes mostrar un di√°logo visual
}

// ‚úÖ REEMPLAZAR discoverServices en connect.dart con versi√≥n que sigue el protocolo:

void discoverServices(BluetoothDevice device, BuildContext context, Function onSosActivated ) async {
  try {
    print("üîç === DESCUBRIENDO SERVICIOS CON PROTOCOLO ===");
    print("Dispositivo: ${device.remoteId}");
    print("Nombre: ${device.platformName}");
    
    List<BluetoothService> services = await device.discoverServices();
    print("üìã Servicios encontrados: ${services.length}");

    // ‚úÖ BUSCAR EL SERVICIO SOS ESPEC√çFICO
    bool sosServiceFound = false;
    BluetoothCharacteristic? writeCharacteristic;
    BluetoothCharacteristic? notifyCharacteristic;
    
    for (var service in services) {
      String serviceUuid = service.uuid.toString().toLowerCase();
      print("üîç Verificando servicio: $serviceUuid");
      
      if (serviceUuid == '6e400001-b5a3-f393-e0a9-e50e24dcca9e') {
        sosServiceFound = true;
        print("‚úÖ ¬°SERVICIO SOS ENCONTRADO!");
        
        // ‚úÖ NOTIFICAR AL DEBUG
        if (_updateSosDebug != null) {
          _updateSosDebug!("servicioEncontrado", true);
        }
        
        // ‚úÖ IDENTIFICAR CARACTER√çSTICAS SEG√öN PROTOCOLO
        for (var characteristic in service.characteristics) {
          String charUuid = characteristic.uuid.toString().toLowerCase();
          print("üîç Caracter√≠stica: $charUuid");
          
          // Write characteristic: 6E400002-B5A3-F393-E0A9-E50E24DCCA9E
          if (charUuid == '6e400002-b5a3-f393-e0a9-e50e24dcca9e') {
            writeCharacteristic = characteristic;
            print("‚úÖ Caracter√≠stica WRITE encontrada");
          }
          
          // Notify characteristic: 6E400003-B5A3-F393-E0A9-E50E24DCCA9E  
          if (charUuid == '6e400003-b5a3-f393-e0a9-e50e24dcca9e') {
            notifyCharacteristic = characteristic;
            print("‚úÖ Caracter√≠stica NOTIFY encontrada");
          }
        }
        
        // ‚úÖ CONFIGURAR NOTIFICACIONES PRIMERO
        if (notifyCharacteristic != null) {
          print("üîî Configurando notificaciones...");
          
          try {
            await notifyCharacteristic.setNotifyValue(true);
            print("‚úÖ Notificaciones activadas");
            
            // ‚úÖ LISTENER CON PROTOCOLO CORRECTO
            notifyCharacteristic.value.listen((value) {
              print("üì° === DATOS BLE PROTOCOLO ===");
              print("Timestamp: ${DateTime.now().toString().substring(11, 19)}");
              print("Datos raw: $value");
              print("Longitud: ${value.length} bytes");
              
              // ‚úÖ ACTUALIZAR DEBUG
              if (_updateSosDebug != null) {
                _updateSosDebug!("datosRecibidos", value);
              }
              
              if (value.isNotEmpty && value.length >= 4) {
                // ‚úÖ VERIFICAR PROTOCOLO: F3 15 F3 LEN XX
                if (value.length >= 5 && 
                    value[0] == 0xF3 && 
                    value[1] == 0x15 && 
                    value[2] == 0xF3) {
                  
                  int dataLength = value[3];
                  print("üîò COMANDO BOT√ìN detectado (F3 15 F3)");
                  print("   Longitud datos: $dataLength");
                  
                  if (value.length >= 5) {
                    int buttonState = value[4];
                    print("   Estado bot√≥n: $buttonState");
                    
                    if (buttonState == 1) {
                      print("üö® ¬°BOT√ìN SOS PRESIONADO! (protocolo correcto)");
                      
                      // ‚úÖ ACTUALIZAR DEBUG
                      if (_updateSosDebug != null) {
                        _updateSosDebug!("botonPresionado", buttonState);
                      }
                      
                      if (!buttonPressed && panicTimer == null) {
                        print("‚úÖ Iniciando secuencia SOS...");
                        buttonPressed = true;
                        
                        panicTimer = Timer(const Duration(seconds: 3), () {
                          if (buttonPressed) {
                            print("üö® ¬°EJECUTANDO ALERTA SOS!");
                            
                            // üîä Reproducir sonido de alerta
                            if (BleData.sosSoundEnabled) {
                              CommunicationService().playSosSound();
                            }

                            // üîπ Traer app al frente
                            CommunicationService().bringToForeground();  

                            // ‚úÖ Actualizar UI
                            onSosActivated();

                            // üìå Enviar alerta SOS
                            CommunicationService().sendSosAlert(device.remoteId.toString());
                            showPanicAlert(context, device.remoteId.toString());
                            
                            // üìû Llamada autom√°tica
                            if (BleData.autoCall) {
                              Future.delayed(const Duration(seconds: 1), () {
                                CommunicationService().callSosNumber();
                              });
                            }
                          }
                          panicTimer = null;
                        });
                      }
                      
                    } else if (buttonState == 0) {
                      print("üîò Bot√≥n soltado (protocolo correcto)");
                      
                      // ‚úÖ ACTUALIZAR DEBUG
                      if (_updateSosDebug != null) {
                        _updateSosDebug!("botonSoltado", buttonState);
                      }
                      
                      if (panicTimer != null && panicTimer!.isActive) {
                        print("‚ùå Cancelando timer SOS");
                        panicTimer!.cancel();
                        panicTimer = null;
                      }
                      buttonPressed = false;
                    }
                  }
                }
                // ‚úÖ VERIFICAR PROTOCOLO BATER√çA: F3 16 F3 LEN XX
                else if (value.length >= 5 && 
                         value[0] == 0xF3 && 
                         value[1] == 0x16 && 
                         value[2] == 0xF3) {
                  
                  int dataLength = value[3];
                  if (value.length >= 5) {
                    int batteryPercent = value[4];
                    print("üîã Bater√≠a recibida: $batteryPercent%");
                    
                    // ‚úÖ ACTUALIZAR BATER√çA EN BleData
                    BleData.update(newBatteryLevel: batteryPercent);
                  }
                }
                else {
                  print("‚ùì Datos no reconocidos por protocolo:");
                  for (int i = 0; i < value.length; i++) {
                    print("  Byte $i: 0x${value[i].toRadixString(16).padLeft(2, '0')} (${value[i]})");
                  }
                }
                
              } else {
                print("‚ö†Ô∏è Datos muy cortos: ${value.length} bytes");
              }
              
              print("üì° === FIN DATOS BLE ===");
            });
            
          } catch (e) {
            print("‚ùå Error configurando notificaciones: $e");
          }
        }
        
        // ‚úÖ ENVIAR COMANDO PARA ACTIVAR REPORTE AUTOM√ÅTICO DE BOT√ìN
        if (writeCharacteristic != null) {
          print("üìù Enviando comandos de configuraci√≥n...");
          
          try {
            // ‚úÖ SOLICITAR BATER√çA (Comando 17): F3 16 F3
            List<int> batteryCommand = [0xF3, 0x16, 0xF3];
            await writeCharacteristic.write(batteryCommand);
            print("‚úÖ Comando de bater√≠a enviado: ${batteryCommand.map((b) => '0x${b.toRadixString(16).padLeft(2, '0')}').join(' ')}");
            
            // ‚úÖ ESPERAR UN POCO entre comandos
            await Future.delayed(Duration(milliseconds: 500));
            
            print("‚úÖ Configuraci√≥n BLE completada seg√∫n protocolo");
            
          } catch (e) {
            print("‚ùå Error enviando comandos: $e");
          }
        } else {
          print("‚ùå Caracter√≠stica WRITE no encontrada");
        }
        
        break; // Solo necesitamos un servicio
      }
    }
    
    if (!sosServiceFound) {
      print("‚ùå SERVICIO SOS NO ENCONTRADO");
      print("Servicios disponibles:");
      for (var service in services) {
        print("  - ${service.uuid}");
      }
    }
    
    print("üîç === FIN CONFIGURACI√ìN PROTOCOLO ===");
    
  } catch (e) {
    print("‚ùå Error en discoverServices: $e");
  }
}

void showPanicAlert(BuildContext context, String bleMacAddress) {
  showDialog(
    context: context,
    builder: (context) {
      return AlertDialog(
        title: const Text("¬°Alerta de P√°nico!"),
        content: Text("Bot√≥n de p√°nico presionado en el dispositivo: $bleMacAddress"),
        actions: [
          TextButton(
            onPressed: () {
              Navigator.of(context).pop();
            },
            child: const Text("Cerrar"),
          ),
        ],
      );
    },
  );
}