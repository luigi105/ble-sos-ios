import 'dart:async';
//import 'dart:io' show Platform, InternetAddress;  // Importar Platform para detectar sistema operativo
import 'package:device_info_plus/device_info_plus.dart'; // Importar DeviceInfoPlugin para obtener el ID
import 'package:connectivity_plus/connectivity_plus.dart';
import 'coms.dart';
import 'ble_data.dart';
import 'package:geolocator/geolocator.dart';
import 'dart:io';


// üÜï CLASE para estado de conectividad detallado (ANTES de class LocationService)
class ConnectivityStatus {
  final bool hasInternet;
  final bool isWifiConnected;
  final bool isMobileConnected;
  final bool isWifiWorking;
  final bool isMobileWorking;
  final String recommendation;
  final String description;
  
  ConnectivityStatus({
    required this.hasInternet,
    required this.isWifiConnected,
    required this.isMobileConnected,
    required this.isWifiWorking,
    required this.isMobileWorking,
    required this.recommendation,
    required this.description,
  });
  
  static ConnectivityStatus unknown = ConnectivityStatus(
    hasInternet: false,
    isWifiConnected: false,
    isMobileConnected: false,
    isWifiWorking: false,
    isMobileWorking: false,
    recommendation: "VERIFICAR_MANUAL",
    description: "Estado desconocido",
  );
}



class LocationService {
  Timer? _locationTimer;
  bool isUpdatingLocation = false;
  String deviceId = "UNKNOWN_DEVICE_ID"; // Valor predeterminado

  LocationService() {
    initializeDeviceId(); // Inicializa el deviceId al crear la instancia
  }

  Future<bool> _checkLocationPermissions() async {
    try {
      bool serviceEnabled = await Geolocator.isLocationServiceEnabled();
      if (!serviceEnabled) {
        print("üö´ GPS desactivado. Intentando activarlo...");
        await Geolocator.openLocationSettings();
        return false;
      }

      LocationPermission permission = await Geolocator.checkPermission();
      if (permission == LocationPermission.denied) {
        permission = await Geolocator.requestPermission();
        if (permission == LocationPermission.denied) {
          print("üö´ Permisos de ubicaci√≥n denegados.");
          return false;
        }
      }

      if (permission == LocationPermission.deniedForever) {
        print("üö´ Permisos de ubicaci√≥n denegados permanentemente. Config√∫ralo manualmente.");
        return false;
      }

      return true;
    } catch (e) {
      print("‚ö†Ô∏è Error al verificar permisos de ubicaci√≥n: $e");
      return false;
    }
  }

  Future<void> initializeDeviceId() async {
    deviceId = await _getUniqueDeviceId();
    BleData.deviceId = deviceId; // Actualiza la variable global
    print("ID √∫nico del dispositivo inicializado: $deviceId");
  }

  Future<String> _getUniqueDeviceId() async {
    try {
      DeviceInfoPlugin deviceInfo = DeviceInfoPlugin();
      if (Platform.isAndroid) {
        AndroidDeviceInfo androidInfo = await deviceInfo.androidInfo;
        if (androidInfo.id.isEmpty) {
          return "UNKNOWN_ANDROID_ID";
        }
        return androidInfo.id;
      } else if (Platform.isIOS) {
        IosDeviceInfo iosInfo = await deviceInfo.iosInfo;
        return iosInfo.identifierForVendor ?? "UNKNOWN_IOS_ID";
      } else {
        return "UNKNOWN_PLATFORM_ID";
      }
    } catch (e) {
      print("Error al obtener el ID del dispositivo: $e");
      return "ERROR_GETTING_ID";
    }
  }

  // Modificaci√≥n de sendLocationOnce() en location.dart para forzar actualizaci√≥n de UI

Future<bool> sendLocationOnce() async {
  print("üì° === INICIANDO ENV√çO DE UBICACI√ìN ROBUSTO ===");
  
  // 1. VERIFICACI√ìN ROBUSTA DE CONECTIVIDAD
  ConnectivityStatus connectivity = await checkRobustConnectivity();
  
  if (!connectivity.hasInternet) {
    print("‚ùå Sin internet confirmado. Recomendaci√≥n: ${connectivity.recommendation}");
    
    // Mostrar informaci√≥n espec√≠fica seg√∫n el problema
    await handleConnectivityIssue(connectivity);
    
    BleData.setLocationConfirmed(false);
    return false;
  }
  
  print("‚úÖ Internet confirmado. Procediendo con env√≠o de ubicaci√≥n...");
  
  // 2. VERIFICAR PERMISOS DE UBICACI√ìN
  if (!await _checkLocationPermissions()) {
    print("üö´ No se puede enviar ubicaci√≥n: permisos denegados.");
    BleData.setLocationConfirmed(false);
    return false;
  }

  try {
    // 3. OBTENER UBICACI√ìN
    bool serviceEnabled = await Geolocator.isLocationServiceEnabled();
    if (!serviceEnabled) {
      print("üö´ Servicio de ubicaci√≥n no habilitado.");
      await Geolocator.openLocationSettings();
      BleData.setLocationConfirmed(false);
      return false;
    }

    Position position;
    try {
      position = await Geolocator.getCurrentPosition(
        desiredAccuracy: LocationAccuracy.high,
      ).timeout(Duration(seconds: 15)); // Timeout m√°s generoso
    } catch (e) {
      print("‚ùå No se pudo obtener la ubicaci√≥n: $e");
      BleData.setLocationConfirmed(false);
      return false;
    }

    // 4. PREPARAR DATOS PARA ENV√çO
    String northSouth = position.latitude >= 0 ? "North" : "South";
    String eastWest = position.longitude >= 0 ? "East" : "West";
    String bleMacAddress = BleData.conBoton == 2 ? "N/A" : BleData.macAddress;
    String imei = BleData.imei;
    String activo = BleData.conBoton == 2 ? "0" : (BleData.isConnected ? "1" : "0");
    int batteryLevel = BleData.conBoton == 1 ? BleData.batteryLevel : 0;
    String cellOnline = "1";
    
    print("üì° Datos preparados:");
    print("üîπ Ubicaci√≥n: ${position.latitude}, ${position.longitude}");
    print("üîπ Conectividad: ${connectivity.description}");
    print("üîπ BLE: $bleMacAddress (activo: $activo)");

    // 5. ENV√çO CON VERIFICACI√ìN DOBLE
    bool success = false;
    
    try {
      final response = await CommunicationService().sendLocation(
        imei,
        position.latitude.abs(),
        position.longitude.abs(),
        northSouth,
        eastWest,
        bleMacAddress,
        activo,
        batteryLevel,
        cellOnline,
      );
      
      if (response.statusCode == 200) {
        print("‚úÖ Ubicaci√≥n enviada exitosamente");
        success = true;
        BleData.setLocationConfirmed(true);
      } else {
        print("‚ùå Error HTTP en env√≠o: ${response.statusCode}");
        success = false;
        BleData.setLocationConfirmed(false);
      }
    } catch (e) {
      print("‚ö†Ô∏è Error al enviar al servidor: $e");
      success = false;
      BleData.setLocationConfirmed(false);
    }
    
    print("üì° === FIN ENV√çO DE UBICACI√ìN: ${success ? '√âXITO' : 'FALLO'} ===");
    return success;

  } catch (e) {
    print("‚ö†Ô∏è Error general en sendLocationOnce: $e");
    BleData.setLocationConfirmed(false);
    return false;
  }
}

// üÜï MANEJAR problemas espec√≠ficos de conectividad
Future<void> handleConnectivityIssue(ConnectivityStatus connectivity) async {
  switch (connectivity.recommendation) {
    case "SUGERIR_DATOS_MOVILES":
      print("üí° Sugerencia: Activar datos m√≥viles como respaldo");
      // Podr√≠as mostrar notificaci√≥n espec√≠fica
      break;
      
    case "VERIFICAR_PLAN_DATOS":
      print("üí° Sugerencia: Verificar plan de datos m√≥viles");
      break;
      
    case "NOTIFICAR_SIN_INTERNET":
      print("üìµ Sin opciones de internet disponibles");
      break;
      
    default:
      print("ü§∑‚Äç‚ôÇÔ∏è Problema de conectividad sin recomendaci√≥n espec√≠fica");
  }
}

  // Obtener nivel de bater√≠a si el dispositivo BLE est√° conectado
  /*Future<int> _getBatteryLevel(BluetoothDevice? device) async {
    if (device == null) return 0; // Si no hay dispositivo, devolver 0
    try {
      List<BluetoothService> services = await device.discoverServices();
      for (var service in services) {
        if (service.uuid.toString() == '6e400001-b5a3-f393-e0a9-e50e24dcca9e') {
          for (var characteristic in service.characteristics) {
            if (characteristic.uuid.toString() == '6e400002-b5a3-f393-e0a9-e50e24dcca9e' &&
                characteristic.properties.write) {
              await characteristic.write([0xF3, 0x16, 0xF3]);
            }
            if (characteristic.uuid.toString() == '6e400003-b5a3-f393-e0a9-e50e24dcca9e' &&
                characteristic.properties.notify) {
              await characteristic.setNotifyValue(true);
              await Future.delayed(const Duration(seconds: 2)); // Esperar notificaci√≥n
              if (characteristic.lastValue.isNotEmpty) {
                return characteristic.lastValue[3]; // Bater√≠a en 4to byte
              }
            }
          }
        }
      }
    } catch (e) {
      print("Error al obtener nivel de bater√≠a: $e");
    }
    return 0; // Si falla, devolver 0
  } */

void startLocationUpdates() {
  if (Platform.isIOS) {
    // ‚úÖ iOS: Usar IOSPlatformManager
    _startIOSLocationUpdates();
  } else {
    // ‚úÖ Android: Usar l√≥gica existente
    _startAndroidLocationUpdates();
  }
}


void _startIOSLocationUpdates() {
  print("üìç Iniciando ubicaci√≥n optimizada para iOS (100m)...");
  
  if (isUpdatingLocation) return;
  isUpdatingLocation = true;
  
  // ‚úÖ ENV√çO INICIAL
  print("üì° iOS: Enviando ubicaci√≥n inicial...");
  sendLocationOnce();
  
  // ‚úÖ TIMER DE RESPALDO m√°s frecuente para geofence de 200m
  _locationTimer = Timer.periodic(const Duration(minutes: 5), (timer) async {
    print("üì° iOS Backup: Enviando ubicaci√≥n de respaldo cada 5 min...");
    bool success = await sendLocationOnce();
    
    if (success != BleData.locationConfirmed) {
      BleData.setLocationConfirmed(success);
    }
  });
  
  print("‚úÖ iOS: Ubicaci√≥n configurada para geofence de 200m (updates cada 100m)");
}

// ‚úÖ A√ëADIR m√©todo para Android (tu l√≥gica existente):
void _startAndroidLocationUpdates() {
  if (isUpdatingLocation) return;
  isUpdatingLocation = true;
  
  print("üì° Iniciando actualizaciones de ubicaci√≥n Android...");
  
  // ‚úÖ Enviar la primera actualizaci√≥n inmediatamente
  sendLocationOnce();

  _locationTimer = Timer.periodic(const Duration(seconds: 90), (timer) async {
    print("üì° Enviando ubicaci√≥n Android...startLocationUpdates ${DateTime.now()}");
    bool success = await sendLocationOnce();
    
    // Verificar si hubo cambio en el estado de confirmaci√≥n de ubicaci√≥n
    if (success != BleData.locationConfirmed) {
      BleData.setLocationConfirmed(success);
    }

    // A√±adir reintento m√°s r√°pido si falla el env√≠o
    if (!success) {
      print("‚ö†Ô∏è Fallo en env√≠o de ubicaci√≥n. Programando reintento...");
      Future.delayed(const Duration(seconds: 30), () {
        if (!BleData.locationConfirmed && isUpdatingLocation) {
          print("üîÑ Reintentando env√≠o de ubicaci√≥n despu√©s de fallo...");
          sendLocationOnce();
        }
      });
    }
  });
}


  void stopLocationUpdates() {

    if (Platform.isIOS) {
      // iOS: No hacer nada - se maneja autom√°ticamente
      print("üìç iOS: Ubicaci√≥n sigue activa autom√°ticamente");
      return;
    }

    if (!isUpdatingLocation) return; // ‚úÖ Solo detiene si ya est√° activo
    isUpdatingLocation = false;

    print("üõë Deteniendo actualizaciones de ubicaci√≥n...");
    _locationTimer?.cancel();
  }

 // üÜï TEST DNS r√°pido (PRIMERO)
Future<bool> testDNSLookup() async {
  try {
    final result = await InternetAddress.lookup('google.com')
        .timeout(Duration(seconds: 3));
    return result.isNotEmpty && result[0].rawAddress.isNotEmpty;
  } catch (e) {
    return false;
  }
}

// üÜï TEST conectividad b√°sica (SEGUNDO)
Future<bool> checkBasicConnectivity() async {
  try {
    var connectivityResult = await Connectivity().checkConnectivity();
    return connectivityResult != ConnectivityResult.none;
  } catch (e) {
    return false;
  }
}

// üÜï VERIFICAR disponibilidad de datos m√≥viles (TERCERO)
Future<bool> checkMobileDataAvailability() async {
  try {
    return true; // Asumir que est√°n disponibles por defecto
  } catch (e) {
    print("‚ö†Ô∏è No se pudo verificar disponibilidad de datos m√≥viles: $e");
    return false;
  }
}

// üÜï VERIFICACI√ìN REAL de internet con m√∫ltiples m√©todos (CUARTO)
Future<bool> verifyRealInternet() async {
  print("üß™ Verificando internet real con m√∫ltiples m√©todos...");
  
  // M√©todo 1: DNS lookup (m√°s r√°pido)
  bool dnsTest = await testDNSLookup();
  print("üîç DNS Test: $dnsTest");
  
  // M√©todo 2: HTTP ping (m√©todo actual de BleData)
  bool httpTest = await BleData.isInternetConnected();
  print("üîç HTTP Test: $httpTest");
  
  // M√©todo 3: Connectivity check (b√°sico)
  bool connectivityTest = await checkBasicConnectivity();
  print("üîç Connectivity Test: $connectivityTest");
  
  // Decisi√≥n: Mayor√≠a de 2 de 3 m√©todos deben funcionar
  int passedTests = [dnsTest, httpTest, connectivityTest].where((test) => test).length;
  bool result = passedTests >= 2;
  
  print("üéØ Tests pasados: $passedTests/3 ‚Üí Resultado: $result");
  return result;
}

// üÜï INFORMACI√ìN DETALLADA de red (QUINTO)
Future<String> getDetailedNetworkInfo(ConnectivityResult result) async {
  switch (result) {
    case ConnectivityResult.wifi:
      try {
        return "WiFi conectado";
      } catch (e) {
        return "WiFi conectado (info limitada)";
      }
      
    case ConnectivityResult.mobile:
      return "Datos m√≥viles activos";
      
    case ConnectivityResult.ethernet:
      return "Ethernet conectado";
      
    case ConnectivityResult.none:
      return "Sin conectividad";
      
    default:
      return "Conectividad desconocida";
  }
}

// üÜï AN√ÅLISIS de estado y recomendaciones (SEXTO)
Future<ConnectivityStatus> analyzeConnectivityStatus(
  ConnectivityResult connectivityResult, 
  bool internetWorking
) async {
  
  bool isWifiConnected = connectivityResult == ConnectivityResult.wifi;
  bool isMobileConnected = connectivityResult == ConnectivityResult.mobile;
  
  // Casos espec√≠ficos
  if (isWifiConnected && internetWorking) {
    return ConnectivityStatus(
      hasInternet: true,
      isWifiConnected: true,
      isMobileConnected: false,
      isWifiWorking: true,
      isMobileWorking: false,
      recommendation: "CONTINUAR_NORMAL",
      description: "WiFi funcionando correctamente",
    );
  }
  
  if (isWifiConnected && !internetWorking) {
    print("‚ö†Ô∏è DETECTADO: WiFi Zombie (conectado sin internet)");
    
    // Verificar si datos m√≥viles est√°n disponibles
    bool mobileAvailable = await checkMobileDataAvailability();
    
    return ConnectivityStatus(
      hasInternet: false,
      isWifiConnected: true,
      isMobileConnected: false,
      isWifiWorking: false,
      isMobileWorking: false,
      recommendation: mobileAvailable ? "SUGERIR_DATOS_MOVILES" : "NOTIFICAR_SIN_INTERNET",
      description: "WiFi conectado pero sin internet real",
    );
  }
  
  if (isMobileConnected && internetWorking) {
    return ConnectivityStatus(
      hasInternet: true,
      isWifiConnected: false,
      isMobileConnected: true,
      isWifiWorking: false,
      isMobileWorking: true,
      recommendation: "CONTINUAR_NORMAL",
      description: "Datos m√≥viles funcionando correctamente",
    );
  }
  
  if (isMobileConnected && !internetWorking) {
    return ConnectivityStatus(
      hasInternet: false,
      isWifiConnected: false,
      isMobileConnected: true,
      isWifiWorking: false,
      isMobileWorking: false,
      recommendation: "VERIFICAR_PLAN_DATOS",
      description: "Datos m√≥viles conectados pero sin internet (posible plan agotado)",
    );
  }
  
  // Sin conectividad
  return ConnectivityStatus(
    hasInternet: false,
    isWifiConnected: false,
    isMobileConnected: false,
    isWifiWorking: false,
    isMobileWorking: false,
    recommendation: "NOTIFICAR_SIN_CONECTIVIDAD",
    description: "Sin conectividad de red",
  );
}



// üÜï M√âTODO ROBUSTO de verificaci√≥n de conectividad (OCTAVO)
Future<ConnectivityStatus> checkRobustConnectivity() async {
  try {
    print("üîç === VERIFICACI√ìN ROBUSTA DE CONECTIVIDAD ===");
    
    // 1. Verificar estado b√°sico de conectividad
    ConnectivityResult connectivityResult = await Connectivity().checkConnectivity();
    print("üì∂ Connectivity Status: $connectivityResult");
    
    // 2. Obtener informaci√≥n detallada de red
    String networkInfo = await getDetailedNetworkInfo(connectivityResult);
    print("üìã Network Info: $networkInfo");
    
    // 3. Verificar internet REAL con m√∫ltiples m√©todos
    bool internetWorking = await verifyRealInternet();
    print("üåê Internet Real: $internetWorking");
    
    // 4. Analizar y decidir acci√≥n
    ConnectivityStatus status = await analyzeConnectivityStatus(
      connectivityResult, 
      internetWorking
    );
    
    print("üéØ Resultado Final: ${status.description}");
    print("üîç === FIN VERIFICACI√ìN ROBUSTA ===");
    
    return status;
    
  } catch (e) {
    print("‚ùå Error en verificaci√≥n robusta: $e");
    return ConnectivityStatus.unknown;
  }
}

}

Future<void> sendSosAlert({String bleMacAddress = "N/A"}) async {
  try {
    print("Enviando se√±al SOS...");
    print("ID del dispositivo: ${BleData.imei}");
    print("MAC Address BLE: $bleMacAddress");

    await CommunicationService().sendSosAlert(
      bleMacAddress // MAC Address del BLE si est√° disponible
    );
  } catch (e) {
    print("Error al enviar se√±al SOS: $e");
  }

}