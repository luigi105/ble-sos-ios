import 'dart:async';
import 'dart:io';
import 'foreground.dart' as android_foreground;
// import 'ios_platform_manager.dart'; // ‚úÖ Descomentar cuando est√© listo

class PlatformManager {
  static bool get isAndroid => Platform.isAndroid;
  static bool get isIOS => Platform.isIOS;
  
  // ‚úÖ INICIALIZACI√ìN UNIFICADA
  static Future<void> initialize() async {
    if (isAndroid) {
      // Usar implementaci√≥n Android existente
      await android_foreground.ForegroundService.initForegroundTask();
    } else if (isIOS) {
      // Usar nueva implementaci√≥n iOS (cuando est√© lista)
      // await IOSPlatformManager.initialize();
      print("üçé iOS: Inicializaci√≥n b√°sica (IOSPlatformManager pendiente)");
    }
  }
  
  // ‚úÖ INICIAR SERVICIO SEG√öN PLATAFORMA
  static Future<void> startService() async {
    if (isAndroid) {
      await android_foreground.ForegroundService.startForegroundTask();
    } else if (isIOS) {
      // iOS no necesita "servicio" - todo es autom√°tico
      print("‚úÖ iOS: Servicios background configurados autom√°ticamente");
    }
  }
  
  // ‚úÖ DETENER SERVICIO SEG√öN PLATAFORMA  
  static Future<void> stopService() async {
    if (isAndroid) {
      // ‚úÖ USAR M√âTODO QUE S√ç EXISTE
      android_foreground.ForegroundService.stopForegroundTask();
    } else if (isIOS) {
      // await IOSPlatformManager.dispose();
      print("üçé iOS: Recursos limpiados autom√°ticamente");
    }
  }
  
  // ‚úÖ VERIFICAR ESTADO DEL SERVICIO
  static Future<bool> isServiceRunning() async {
    if (isAndroid) {
      return android_foreground.ForegroundService.isRunning;
    } else if (isIOS) {
      // return IOSPlatformManager.isLocationActive;
      return true; // Temporalmente hasta que IOSPlatformManager est√© listo
    }
    return false;
  }
  
  // ‚úÖ REGISTRAR CALLBACK DE UBICACI√ìN
  static void registerLocationCallback(Function callback) {
    if (isAndroid) {
      android_foreground.ForegroundService.registerLocationServiceCallback(callback);
    }
    // iOS no necesita callback manual - es autom√°tico
  }
}